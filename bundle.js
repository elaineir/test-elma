(()=>{"use strict";const e="assignByDate",t={parentSelector:".backlog__tasks-container",templateSelector:".template-card-backlog",elementSelector:".card-backlog",titleSelector:".card-backlog__title",descriptionSelector:".card-backlog__description",startDateSelector:".card-backlog__date-span_start",endDateSelector:".card-backlog__date-span_end",dragStartClass:"card-backlog_draggable"},a={parentSelector:".board__users",templateSelector:".template-card-user",elementSelector:".card-user",userNameSelector:".card-user__name",dragOverClass:"card-user_drag-over"},s={parentSelector:".board__calendar",templateSelector:".template-calendar-column",elementSelector:".calendar-column",dateCellSelector:".calendar-column__date",currentDayClass:"calendar-column_current-day"},r={templateSelector:".template-calendar-cell",elementSelector:".calendar-cell",elementClass:"calendar-cell",dragOverClass:"calendar-cell_drag-over"},l={templateSelector:".template-calendar-task",elementSelector:".calendar-task",elementClass:"calendar-task",titleSelector:".calendar-task__title",subtitleSelector:".calendar-task__subtitle",descriptionSelector:".calendar-task__description",startDateSelector:".calendar-task__date-span_start",endDateSelector:".calendar-task__date-span_end"},n="ru-RU",c={weekday:"short",year:"numeric",month:"short",day:"numeric"},i={day:"numeric",month:"numeric"},d="isThemeDark",o=e=>new Date(e).toLocaleDateString(n,c),h=e=>new Date(e).toLocaleDateString("en-CA"),_=new class{constructor(){this._subscribers=[],this._assignedTasks=[],this._backlogTasks=[],this._users=[],this._usersIds={},this._calendarLength=7,this._currentDate=new Date,this._currentDateNumeric=h(new Date),this._startDay=this._updateAndSetDates()}_removeTaskFromBacklog(e){this._backlogTasks=this._backlogTasks.filter((t=>t.id!==e))}_callSubscribers(){this._subscribers.forEach((e=>e()))}_updateAndSetDates(){const e=new Date(this._currentDate.setHours(0,0,0,0));return e.setDate(e.getDate()-e.getDay()+(0===e.getDay()?-6:1))}get assignedTasks(){return this._assignedTasks}get backlogTasks(){return this._backlogTasks}get usersIds(){return this._usersIds}set users(e){this._users=e}get users(){return this._users}get calendarLength(){return this._calendarLength}get startDay(){return this._startDay}set startDay(e){this._startDay=e}get currentDateNumeric(){return this._currentDateNumeric}addTaskToAssignedTasks(e){this._assignedTasks.push(e)}assignTask({type:t,taskId:a,executorId:s,startDate:r}){const l=this._backlogTasks.find((e=>a===e.id));if(l.executor=+s,t===e){if(this._currentDate>Date.parse(r))return;if(l.planEndDate===l.planStartDate)l.planEndDate=r;else{const e=Date.parse(l.planEndDate)-Date.parse(l.planStartDate),t=Date.parse(r)+e;l.planEndDate=h(t)}l.planStartDate=r}this.addTaskToAssignedTasks(l),this._removeTaskFromBacklog(a),this._callSubscribers()}addTaskToBacklog(e){this._backlogTasks.push(e)}mapUsersIds(e){const t=e.reduce(((e,{id:t},a)=>({...e,[a]:t})),{});this._usersIds={...t}}addSubscribers(e){this._subscribers=[...e]}},u=async e=>{return(t=await fetch(`https://varankin_dev.elma365.ru/api/extensions/2a38760e-083a-4dd0-aebc-78b570bfd3c7/script${e}`,{method:"GET"})).ok?t.json():Promise.reject(t);var t},m=class{constructor({templateSelector:e,elementSelector:t}){this._templateSelector=e,this._elementSelector=t}_getTemplate(){return this._template=document.querySelector(this._templateSelector).content,this._template.querySelector(this._elementSelector).cloneNode(!0)}},p=class extends m{constructor(e,{templateSelector:t,elementSelector:a,titleSelector:s,descriptionSelector:r,startDateSelector:l,endDateSelector:n,dragStartClass:c}){super({templateSelector:t,elementSelector:a}),this._cardData=e,this._backlogCard=super._getTemplate(),this._dragStartClass=c,this._cardTitle=this._backlogCard.querySelector(s),this._cardDescription=this._backlogCard.querySelector(r),this._cardStartDate=this._backlogCard.querySelector(l),this._cardEndDate=this._backlogCard.querySelector(n),this._handleDragStart=this._handleDragStart.bind(this),this._handleDragEnd=this._handleDragEnd.bind(this)}_handleDragStart(e){this._backlogCard.classList.add(this._dragStartClass),e.dataTransfer.setData("text/plain",this._cardData.id),e.dataTransfer.effectAllowed="move"}_handleDragEnd(){this._backlogCard.classList.remove(this._dragStartClass)}createCard(){return this._cardTitle.textContent=this._cardData.subject,this._cardDescription.textContent=this._cardData.description,this._cardStartDate.textContent=o(this._cardData.planStartDate),this._cardEndDate.textContent=o(this._cardData.planEndDate),this._backlogCard.setAttribute("id",this._cardData.id),this._backlogCard}setEventListeners(){this._backlogCard.addEventListener("dragstart",this._handleDragStart),this._backlogCard.addEventListener("dragend",this._handleDragEnd)}},D=class{constructor(e){this._container=document.querySelector(e),this.clearItems=this.clearItems.bind(this)}addItem(e){this._container.append(e)}clearItems(){this._container.textContent=""}addTextContent(e){this._container.textContent=e}},g=class extends m{constructor(e,{templateSelector:t,elementSelector:a,titleSelector:s,subtitleSelector:r,descriptionSelector:l,startDateSelector:n,endDateSelector:c}){super({templateSelector:t,elementSelector:a}),this._task=e,this._taskElement=super._getTemplate(),this._titleELement=this._taskElement.querySelector(s),this._subtitleELement=this._taskElement.querySelector(r),this._descriptionElement=this._taskElement.querySelector(l),this._startDateElement=this._taskElement.querySelector(n),this._endDateElement=this._taskElement.querySelector(c)}createTask(){return this._titleELement.textContent=this._task.subject,this._subtitleELement.textContent=this._task.subject,this._descriptionElement.textContent=this._task.description,this._startDateElement.textContent=o(this._task.planStartDate),this._endDateElement.textContent=o(this._task.planEndDate),this._taskElement}},S=class extends m{constructor(e,{templateSelector:t,elementSelector:a}){super({templateSelector:t,elementSelector:a}),this._cell=e,this._cellElement=super._getTemplate()}_addItem(e){this._cellElement.append(e)}createCell(){return this._cellElement.setAttribute("data-executor",this._cell.executor),this._cellElement.setAttribute("data-date",this._cell.date),this._cellElement}renderItems(){this._cell.tasks.forEach((e=>{const t=new g(e,l);this._addItem(t.createTask())}))}},k=class extends m{constructor(e,{templateSelector:t,elementSelector:a,dateCellSelector:s,currentDayClass:r}){super({templateSelector:t,elementSelector:a}),this._column=e,this._calendarColumn=super._getTemplate(),this._dateElement=this._calendarColumn.querySelector(s),this._currentDayClass=r,this._dayTasksSchema={}}_getTasksForCurrentDay(e){const t=Date.parse(this._column.date);return e.filter((e=>Date.parse(e.planStartDate)<=t&&t<=Date.parse(e.planEndDate)))}_getDayTasksSchema(){this._tasksForCurrentDay=this._getTasksForCurrentDay(_.assignedTasks),this._tasksForCurrentDay&&this._tasksForCurrentDay.forEach((e=>{this._dayTasksSchema[e.executor]?this._dayTasksSchema[e.executor]=[...this._dayTasksSchema[e.executor],e]:this._dayTasksSchema[e.executor]=[e]}))}createCells(){this._getDayTasksSchema();for(let e=0;e<_.users.length;e+=1){const t=_.usersIds[e],a=new S({executor:t,date:this._column.date,tasks:this._dayTasksSchema[t]??[]},r),s=a.createCell();a.renderItems(),this.addItem(s)}}createCalendarColumn(){const e=new Date(this._column.date);return this._dateElement.textContent=new Date(e).toLocaleDateString(n,i),this._column.date===_.currentDateNumeric&&this._calendarColumn.classList.add(this._currentDayClass),this.createCells(),this._calendarColumn}addItem(e){this._calendarColumn.append(e)}},b=class extends m{constructor(e,{templateSelector:t,elementSelector:a,userNameSelector:s,dragOverClass:r}){super({templateSelector:t,elementSelector:a}),this._cardData=e,this._userCard=super._getTemplate(),this._fullNameElement=this._userCard.querySelector(s),this._dragOverClass=r,this._handleDragOver=this._handleDragOver.bind(this),this._handleDragLeave=this._handleDragLeave.bind(this),this._handleDrop=this._handleDrop.bind(this)}_handleDragOver(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this._userCard.classList.add(this._dragOverClass))}_handleDragLeave(){this._userCard.classList.remove(this._dragOverClass)}_handleDrop(e){e.preventDefault();const t=e.dataTransfer.getData("text/plain");_.assignTask({type:"assignByUser",taskId:t,executorId:this._cardData.id}),this._handleDragLeave()}createCard(){return this._fullNameElement.textContent=`${this._cardData.firstName} ${this._cardData.surname}`,this._userCard}setEventListeners(){this._userCard.addEventListener("dragover",this._handleDragOver),this._userCard.addEventListener("dragleave",this._handleDragLeave),this._userCard.addEventListener("drop",this._handleDrop)}},C=e=>{setTimeout((()=>{e.removeAttribute("style")}),1100)},y=(e,t)=>{e.setAttribute("style",`animation: slide-in-bottom-up 0.5s ease-out 0.${t}s forwards; opacity: 0;`),C(e)},v=document.querySelector(".page"),T=document.querySelector(".preloader"),E=new class{constructor(e){this._selectors=e,this._popup=document.querySelector(e.popupError)}open(){this._popup.classList.add(this._selectors.popupOpenClass),this._close()}_close(){setTimeout((()=>{this._popup.classList.remove(this._selectors.popupOpenClass)}),3e3)}}({popupError:".popup_error",popupOpenClass:"popup_open"}),L=new D(t.parentSelector),f=new D(a.parentSelector),x=new class extends D{constructor(e){super(e),this._handleDragOver=this._handleDragOver.bind(this),this._handleDragLeave=this._handleDragLeave.bind(this),this._handleDrop=this._handleDrop.bind(this)}_handleDragOver(e){const{target:t}=e;e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(t.classList.contains(r.elementClass)||t.classList.contains(l.elementClass))&&(e.preventDefault(),this._droppableCell=t.closest(r.elementSelector),this._droppableCell.classList.add(r.dragOverClass))}_handleDragLeave(){this._droppableCell.classList.remove(r.dragOverClass)}_handleDrop(t){t.preventDefault();const a=t.dataTransfer.getData("text/plain");_.assignTask({type:e,taskId:a,executorId:this._droppableCell.dataset.executor,startDate:this._droppableCell.dataset.date}),this._handleDragLeave()}setEventListeners(){this._container.addEventListener("dragover",this._handleDragOver),this._container.addEventListener("dragleave",this._handleDragLeave),this._container.addEventListener("drop",this._handleDrop)}}(s.parentSelector);x.setEventListeners();const I=e=>{for(let r=0;r<_.calendarLength;r+=1){const l=_.startDay+864e5*r,n=h(l),c=new k({date:n},s).createCalendarColumn();e&&(a=r,(t=c).setAttribute("style",`animation: slide-in-right-left 0.5s ease-out 0.${a}s forwards; opacity: 0;`),C(t)),x.addItem(c)}var t,a},w=e=>{const a=new p(e,t),s=a.createCard();return a.setEventListeners(),s},q=()=>{_.backlogTasks.forEach(((e,t)=>{const a=w(e);y(a,t),L.addItem(a)}))};(async()=>{try{const e=await u("/users");(await u("/tasks")).forEach((e=>{e.executor?_.addTaskToAssignedTasks(e):_.addTaskToBacklog(e)})),_.users=e,_.mapUsersIds(e),((e,t)=>{e.forEach(((e,t)=>{const s=new b(e,a),r=s.createCard();y(r,t),s.setEventListeners(),f.addItem(r)}))})(e),I(!0),q()}catch(e){E.open()}v.classList.remove("page_hidden"),T.classList.remove("preloader_visible")})(),((e,t,a)=>{const s=document.querySelector(".search-form"),r=s.querySelector(".search-form__input"),l=s.querySelector(".button_search");s.addEventListener("submit",(s=>{s.preventDefault();const n=r.value;let c;n.length&&(c=_.backlogTasks.filter((e=>e.subject.toLowerCase().includes(n.toLowerCase()))),e.clearItems(),c.length?c.forEach((a=>{const s=t(a);e.addItem(s)})):(e.addTextContent("Ничего не нашлось"),l.disabled=!0,setTimeout((()=>{e.clearItems(),a(),l.disabled=!1}),3e3)))}))})(L,w,q),((e,t)=>{const a=document.querySelector(".button_next"),s=document.querySelector(".button_prev");a.addEventListener("click",(()=>{e(),_.startDay+=6048e5,t()})),s.addEventListener("click",(()=>{e(),_.startDay-=6048e5,t()}))})(x.clearItems,I),(({bodySelector:e,bodyNewThemeClass:t,buttonSelector:a})=>{const s=document.querySelector(e),r=document.querySelector(a);JSON.parse(localStorage.getItem(d))&&s.classList.add(t),r.addEventListener("click",(()=>{s.classList.contains(t)?(s.classList.remove(t),localStorage.setItem(d,JSON.stringify(!1))):(s.classList.add(t),localStorage.setItem(d,JSON.stringify(!0)))}))})({bodySelector:".body",bodyNewThemeClass:"body_theme_dark",buttonSelector:".button_theme",buttonNewThemeClass:"button_theme_dark"}),_.addSubscribers([x.clearItems,L.clearItems,I,q])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,