(()=>{"use strict";const e="assignByDate",t={parentSelector:".backlog__tasks-container",templateSelector:".template-card-backlog",elementSelector:".card-backlog",titleSelector:".card-backlog__title",descriptionSelector:".card-backlog__description",startDateSelector:".card-backlog__date-span_start",endDateSelector:".card-backlog__date-span_end",dragStartClass:"card-backlog_draggable"},a={parentSelector:".board__users",templateSelector:".template-card-user",elementSelector:".card-user",userNameSelector:".card-user__name",dragOverClass:"card-user_drag-over"},s={parentSelector:".board__calendar",templateSelector:".template-calendar-column",elementSelector:".calendar-column",dateCellSelector:".calendar-column__date",currentDayClass:"calendar-column_current-day"},r={templateSelector:".template-calendar-cell",elementSelector:".calendar-cell",elementClass:"calendar-cell",dragOverClass:"calendar-cell_drag-over"},l={templateSelector:".template-calendar-task",elementSelector:".calendar-task",elementClass:"calendar-task",titleSelector:".calendar-task__title",subtitleSelector:".calendar-task__subtitle",descriptionSelector:".calendar-task__description",startDateSelector:".calendar-task__date-span_start",endDateSelector:".calendar-task__date-span_end"},n="ru-RU",c={weekday:"short",year:"numeric",month:"short",day:"numeric"},i={day:"numeric",month:"numeric"},d="isThemeDark",o=e=>new Date(e).toLocaleDateString(n,c),h=e=>new Date(e).toLocaleDateString("en-CA"),_=new class{constructor(){this._subscribers=[],this._assignedTasks=[],this._backlogTasks=[],this._users=[],this._usersIds={},this._calendarLength=7,this._currentDate=new Date,this._currentDateNumeric=h(new Date),this._startDay=this._updateAndSetDates()}_removeTaskFromBacklog(e){this._backlogTasks=this._backlogTasks.filter((t=>t.id!==e))}_callSubscribers(){this._subscribers.forEach((e=>e()))}_updateAndSetDates(){const e=new Date(this._currentDate.setHours(0,0,0,0));return e.setDate(e.getDate()-e.getDay()+(0===e.getDay()?-6:1))}get assignedTasks(){return this._assignedTasks}get backlogTasks(){return this._backlogTasks}get usersIds(){return this._usersIds}set users(e){this._users=e}get users(){return this._users}get calendarLength(){return this._calendarLength}get startDay(){return this._startDay}set startDay(e){this._startDay=e}get currentDateNumeric(){return this._currentDateNumeric}addTaskToAssignedTasks(e){this._assignedTasks.push(e)}assignTask({type:t,taskId:a,executorId:s,startDate:r}){const l=this._backlogTasks.find((e=>a===e.id));if(l.executor=+s,t===e){if(this._currentDate>Date.parse(r))return;if(l.planEndDate===l.planStartDate)l.planEndDate=r;else{const e=Date.parse(l.planEndDate)-Date.parse(l.planStartDate),t=Date.parse(r)+e;l.planEndDate=h(t)}l.planStartDate=r}this.addTaskToAssignedTasks(l),this._removeTaskFromBacklog(a),this._callSubscribers()}addTaskToBacklog(e){this._backlogTasks.push(e)}mapUsersIds(e){const t=e.reduce(((e,{id:t},a)=>({...e,[a]:t})),{});this._usersIds={...t}}addSubscribers(e){this._subscribers=[...e]}},u=async e=>{return(t=await fetch(`https://varankin_dev.elma365.ru/api/extensions/2a38760e-083a-4dd0-aebc-78b570bfd3c7/script${e}`,{method:"GET"})).ok?t.json():Promise.reject(t);var t},m=class{constructor({templateSelector:e,elementSelector:t}){this._templateSelector=e,this._elementSelector=t}_getTemplate(){return this._template=document.querySelector(this._templateSelector).content,this._template.querySelector(this._elementSelector).cloneNode(!0)}},p=class extends m{constructor(e,{templateSelector:t,elementSelector:a,titleSelector:s,descriptionSelector:r,startDateSelector:l,endDateSelector:n,dragStartClass:c}){super({templateSelector:t,elementSelector:a}),this._cardData=e,this._backlogCard=super._getTemplate(),this._dragStartClass=c,this._cardTitle=this._backlogCard.querySelector(s),this._cardDescription=this._backlogCard.querySelector(r),this._cardStartDate=this._backlogCard.querySelector(l),this._cardEndDate=this._backlogCard.querySelector(n),this._handleDragStart=this._handleDragStart.bind(this),this._handleDragEnd=this._handleDragEnd.bind(this)}_handleDragStart(e){this._backlogCard.classList.add(this._dragStartClass),e.dataTransfer.setData("text/plain",this._cardData.id),e.dataTransfer.effectAllowed="move"}_handleDragEnd(){this._backlogCard.classList.remove(this._dragStartClass)}createCard(){return this._cardTitle.textContent=this._cardData.subject,this._cardDescription.textContent=this._cardData.description,this._cardStartDate.textContent=o(this._cardData.planStartDate),this._cardEndDate.textContent=o(this._cardData.planEndDate),this._backlogCard.setAttribute("id",this._cardData.id),this._backlogCard}setEventListeners(){this._backlogCard.addEventListener("dragstart",this._handleDragStart),this._backlogCard.addEventListener("dragend",this._handleDragEnd)}},g=class{constructor(e){this._container=document.querySelector(e),this.clearItems=this.clearItems.bind(this)}addItem(e){this._container.append(e)}clearItems(){this._container.textContent=""}addTextContent(e){this._container.textContent=e}},D=class extends m{constructor(e,{templateSelector:t,elementSelector:a,titleSelector:s,subtitleSelector:r,descriptionSelector:l,startDateSelector:n,endDateSelector:c}){super({templateSelector:t,elementSelector:a}),this._task=e,this._taskElement=super._getTemplate(),this._titleELement=this._taskElement.querySelector(s),this._subtitleELement=this._taskElement.querySelector(r),this._descriptionElement=this._taskElement.querySelector(l),this._startDateElement=this._taskElement.querySelector(n),this._endDateElement=this._taskElement.querySelector(c)}createTask(){return this._titleELement.textContent=this._task.subject,this._subtitleELement.textContent=this._task.subject,this._descriptionElement.textContent=this._task.description,this._startDateElement.textContent=o(this._task.planStartDate),this._endDateElement.textContent=o(this._task.planEndDate),this._taskElement}},S=class extends m{constructor(e,{templateSelector:t,elementSelector:a}){super({templateSelector:t,elementSelector:a}),this._cell=e,this._cellElement=super._getTemplate()}_addItem(e){this._cellElement.append(e)}createCell(){return this._cellElement.setAttribute("data-executor",this._cell.executor),this._cellElement.setAttribute("data-date",this._cell.date),this._cellElement}renderItems(){this._cell.tasks.forEach((e=>{const t=new D(e,l);this._addItem(t.createTask())}))}},k=class extends m{constructor(e,{templateSelector:t,elementSelector:a,dateCellSelector:s,currentDayClass:r}){super({templateSelector:t,elementSelector:a}),this._column=e,this._calendarColumn=super._getTemplate(),this._dateElement=this._calendarColumn.querySelector(s),this._currentDayClass=r,this._dayTasksSchema={}}_getTasksForCurrentDay(e){const t=Date.parse(this._column.date);return e.filter((e=>Date.parse(e.planStartDate)<=t&&t<=Date.parse(e.planEndDate)))}_getDayTasksSchema(){this._tasksForCurrentDay=this._getTasksForCurrentDay(_.assignedTasks),this._tasksForCurrentDay&&this._tasksForCurrentDay.forEach((e=>{this._dayTasksSchema[e.executor]?this._dayTasksSchema[e.executor]=[...this._dayTasksSchema[e.executor],e]:this._dayTasksSchema[e.executor]=[e]}))}createCells(){this._getDayTasksSchema();for(let e=0;e<_.users.length;e+=1){const t=_.usersIds[e],a=new S({executor:t,date:this._column.date,tasks:this._dayTasksSchema[t]??[]},r),s=a.createCell();a.renderItems(),this.addItem(s)}}createCalendarColumn(){const e=new Date(this._column.date);return this._dateElement.textContent=new Date(e).toLocaleDateString(n,i),this._column.date===_.currentDateNumeric&&this._calendarColumn.classList.add(this._currentDayClass),this.createCells(),this._calendarColumn}addItem(e){this._calendarColumn.append(e)}},b=class extends m{constructor(e,{templateSelector:t,elementSelector:a,userNameSelector:s,dragOverClass:r}){super({templateSelector:t,elementSelector:a}),this._cardData=e,this._userCard=super._getTemplate(),this._fullNameElement=this._userCard.querySelector(s),this._dragOverClass=r,this._handleDragOver=this._handleDragOver.bind(this),this._handleDragLeave=this._handleDragLeave.bind(this),this._handleDrop=this._handleDrop.bind(this)}_handleDragOver(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this._userCard.classList.add(this._dragOverClass))}_handleDragLeave(){this._userCard.classList.remove(this._dragOverClass)}_handleDrop(e){const t=e.dataTransfer.getData("text/plain");_.assignTask({type:"assignByUser",taskId:t,executorId:this._cardData.id}),this._handleDragLeave()}createCard(){return this._fullNameElement.textContent=`${this._cardData.firstName} ${this._cardData.surname}`,this._userCard}setEventListeners(){this._userCard.addEventListener("dragover",this._handleDragOver),this._userCard.addEventListener("dragleave",this._handleDragLeave),this._userCard.addEventListener("drop",this._handleDrop)}},C=e=>{setTimeout((()=>{e.removeAttribute("style")}),1100)},y=(e,t)=>{e.setAttribute("style",`animation: slide-in-bottom-up 0.5s ease-out 0.${t}s forwards; opacity: 0;`),C(e)},v=document.querySelector(".page"),T=document.querySelector(".preloader"),E=new class{constructor(e){this._selectors=e,this._popup=document.querySelector(e.popupError)}open(){this._popup.classList.add(this._selectors.popupOpenClass),this._close()}_close(){setTimeout((()=>{this._popup.classList.remove(this._selectors.popupOpenClass)}),3e3)}}({popupError:".popup_error",popupOpenClass:"popup_open"}),L=new g(t.parentSelector),f=new g(a.parentSelector),x=new class extends g{constructor(e){super(e),this._handleDragOver=this._handleDragOver.bind(this),this._handleDragLeave=this._handleDragLeave.bind(this),this._handleDrop=this._handleDrop.bind(this)}_handleDragOver(e){const{target:t}=e;e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(t.classList.contains(r.elementClass)||t.classList.contains(l.elementClass))&&(e.preventDefault(),this._droppableCell=t.closest(r.elementSelector),this._droppableCell.classList.add(r.dragOverClass))}_handleDragLeave(){this._droppableCell.classList.remove(r.dragOverClass)}_handleDrop(t){const a=t.dataTransfer.getData("text/plain");_.assignTask({type:e,taskId:a,executorId:this._droppableCell.dataset.executor,startDate:this._droppableCell.dataset.date}),this._handleDragLeave()}setEventListeners(){this._container.addEventListener("dragover",this._handleDragOver),this._container.addEventListener("dragleave",this._handleDragLeave),this._container.addEventListener("drop",this._handleDrop)}}(s.parentSelector);x.setEventListeners();const I=e=>{for(let r=0;r<_.calendarLength;r+=1){const l=_.startDay+864e5*r,n=h(l),c=new k({date:n},s).createCalendarColumn();e&&(a=r,(t=c).setAttribute("style",`animation: slide-in-right-left 0.5s ease-out 0.${a}s forwards; opacity: 0;`),C(t)),x.addItem(c)}var t,a},w=e=>{const a=new p(e,t),s=a.createCard();return a.setEventListeners(),s},q=()=>{_.backlogTasks.forEach(((e,t)=>{const a=w(e);y(a,t),L.addItem(a)}))};(async()=>{try{const e=await u("/users");(await u("/tasks")).forEach((e=>{e.executor?_.addTaskToAssignedTasks(e):_.addTaskToBacklog(e)})),_.users=e,_.mapUsersIds(e),((e,t)=>{e.forEach(((e,t)=>{const s=new b(e,a),r=s.createCard();y(r,t),s.setEventListeners(),f.addItem(r)}))})(e),I(!0),q()}catch(e){E.open()}v.classList.remove("page_hidden"),T.classList.remove("preloader_visible")})(),((e,t,a)=>{const s=document.querySelector(".search-form"),r=s.querySelector(".search-form__input"),l=s.querySelector(".button_search");s.addEventListener("submit",(s=>{s.preventDefault();const n=r.value;let c;n.length&&(c=_.backlogTasks.filter((e=>e.subject.toLowerCase().includes(n.toLowerCase()))),e.clearItems(),c.length?c.forEach((a=>{const s=t(a);e.addItem(s)})):(e.addTextContent("Ничего не нашлось"),l.disabled=!0,setTimeout((()=>{e.clearItems(),a(),l.disabled=!1}),3e3)))}))})(L,w,q),((e,t)=>{const a=document.querySelector(".button_next"),s=document.querySelector(".button_prev");a.addEventListener("click",(()=>{e(),_.startDay+=6048e5,t()})),s.addEventListener("click",(()=>{e(),_.startDay-=6048e5,t()}))})(x.clearItems,I),(({bodySelector:e,bodyNewThemeClass:t,buttonSelector:a})=>{const s=document.querySelector(e),r=document.querySelector(a);JSON.parse(localStorage.getItem(d))&&s.classList.add(t),r.addEventListener("click",(()=>{s.classList.contains(t)?(s.classList.remove(t),localStorage.setItem(d,JSON.stringify(!1))):(s.classList.add(t),localStorage.setItem(d,JSON.stringify(!0)))}))})({bodySelector:".body",bodyNewThemeClass:"body_theme_dark",buttonSelector:".button_theme",buttonNewThemeClass:"button_theme_dark"}),_.addSubscribers([x.clearItems,L.clearItems,I,q])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eUJHLE9BQ3pCYixPQWFGWSxFQUFldEcsaUJBQWlCLFNBVlgsS0FDbkJvRyxJQUNBLFlBQXlCRyxPQUN6QmIsUUw0RkosQ0FBdUJ0QixFQUFrQmpFLFdBQVl1RSxHTXZHeEIsR0FBRzhCLGFBQUFBLEVBQWNDLGtCQUFBQSxFQUFtQkMsZUFBQUEsTUFDL0QsTUFBTUMsRUFBT3hJLFNBQVNDLGNBQWNvSSxHQUM5QkksRUFBeUJ6SSxTQUFTQyxjQUFjc0ksR0FFbENHLEtBQUtwSyxNQUFNcUssYUFBYUMsUUFBUXJOLEtBR2xEaU4sRUFBS3ZILFVBQVVDLElBQUlvSCxHQWFyQkcsRUFBdUI1RyxpQkFBaUIsU0FWYixLQUNyQjJHLEVBQUt2SCxVQUFVa0YsU0FBU21DLElBQzFCRSxFQUFLdkgsVUFBVUssT0FBT2dILEdBQ3RCSyxhQUFhRSxRQUFRdE4sRUFBc0JtTixLQUFLSSxXQUFVLE1BRTFETixFQUFLdkgsVUFBVUMsSUFBSW9ILEdBQ25CSyxhQUFhRSxRQUFRdE4sRUFBc0JtTixLQUFLSSxXQUFVLFNOeUZoRSxDWjNHbUMsQ0FDakNULGFBQWMsUUFDZEMsa0JBQW1CLGtCQUNuQkMsZUFBZ0IsZ0JBQ2hCUSxvQkFBcUIsc0JZMEd2QixpQkFBNEIsQ0FDMUI5QyxFQUFrQmpFLFdBQ2xCK0QsRUFBWS9ELFdBQ1p1RSxFQUNBTyxLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVzdC1lbG1hLy4vc3JjL3N0YXRlL3R5cGVzLmpzIiwid2VicGFjazovL3Rlc3QtZWxtYS8uL3NyYy9jb25maWcvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3Rlc3QtZWxtYS8uL3NyYy91dGlscy9oYW5kbGUtZGF0ZXMuanMiLCJ3ZWJwYWNrOi8vdGVzdC1lbG1hLy4vc3JjL3N0YXRlL1Byb2plY3RTdGF0ZS5qcyIsIndlYnBhY2s6Ly90ZXN0LWVsbWEvLi9zcmMvYXBpL21haW4tYXBpLmpzIiwid2VicGFjazovL3Rlc3QtZWxtYS8uL3NyYy9jb21wb25lbnRzL0NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly90ZXN0LWVsbWEvLi9zcmMvY29tcG9uZW50cy9CYWNrbG9nQ2FyZC5qcyIsIndlYnBhY2s6Ly90ZXN0LWVsbWEvLi9zcmMvY29tcG9uZW50cy9SZW5kZXJlclNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdGVzdC1lbG1hLy4vc3JjL2NvbXBvbmVudHMvQ2FsZW5kYXJUYXNrLmpzIiwid2VicGFjazovL3Rlc3QtZWxtYS8uL3NyYy9jb21wb25lbnRzL0NhbGVuZGFyQ2VsbC5qcyIsIndlYnBhY2s6Ly90ZXN0LWVsbWEvLi9zcmMvY29tcG9uZW50cy9DYWxlbmRhckNvbHVtbi5qcyIsIndlYnBhY2s6Ly90ZXN0LWVsbWEvLi9zcmMvY29tcG9uZW50cy9Vc2VyQ2FyZC5qcyIsIndlYnBhY2s6Ly90ZXN0LWVsbWEvLi9zcmMvdXRpbHMvYXBwbHktc3R5bGUtYW5pbWF0aW9uLmpzIiwid2VicGFjazovL3Rlc3QtZWxtYS8uL3NyYy9hcHAuanMiLCJ3ZWJwYWNrOi8vdGVzdC1lbG1hLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBFcnJvci5qcyIsIndlYnBhY2s6Ly90ZXN0LWVsbWEvLi9zcmMvY29tcG9uZW50cy9DYWxlbmRhci5qcyIsIndlYnBhY2s6Ly90ZXN0LWVsbWEvLi9zcmMvY29uZmlnL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXN0LWVsbWEvLi9zcmMvdXRpbHMvc2VhcmNoLmpzIiwid2VicGFjazovL3Rlc3QtZWxtYS8uL3NyYy91dGlscy9zd2l0Y2gtYmV0d2Vlbi13ZWVrcy5qcyIsIndlYnBhY2s6Ly90ZXN0LWVsbWEvLi9zcmMvdXRpbHMvdG9nZ2xlLWNvbG9yLXRoZW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBBU1NJR05fQllfVVNFUiA9ICdhc3NpZ25CeVVzZXInO1xuZXhwb3J0IGNvbnN0IEFTU0lHTl9CWV9EQVRFID0gJ2Fzc2lnbkJ5RGF0ZSc7XG4iLCJleHBvcnQgY29uc3QgdG9nZ2xlVGhlbWVTZXR0aW5ncyA9IHtcbiAgYm9keVNlbGVjdG9yOiAnLmJvZHknLFxuICBib2R5TmV3VGhlbWVDbGFzczogJ2JvZHlfdGhlbWVfZGFyaycsXG4gIGJ1dHRvblNlbGVjdG9yOiAnLmJ1dHRvbl90aGVtZScsXG4gIGJ1dHRvbk5ld1RoZW1lQ2xhc3M6ICdidXR0b25fdGhlbWVfZGFyaycsXG59O1xuXG5leHBvcnQgY29uc3QgYmFja2xvZ0NhcmRTZWxlY3RvcnMgPSB7XG4gIHBhcmVudFNlbGVjdG9yOiAnLmJhY2tsb2dfX3Rhc2tzLWNvbnRhaW5lcicsXG4gIHRlbXBsYXRlU2VsZWN0b3I6ICcudGVtcGxhdGUtY2FyZC1iYWNrbG9nJyxcbiAgZWxlbWVudFNlbGVjdG9yOiAnLmNhcmQtYmFja2xvZycsXG4gIHRpdGxlU2VsZWN0b3I6ICcuY2FyZC1iYWNrbG9nX190aXRsZScsXG4gIGRlc2NyaXB0aW9uU2VsZWN0b3I6ICcuY2FyZC1iYWNrbG9nX19kZXNjcmlwdGlvbicsXG4gIHN0YXJ0RGF0ZVNlbGVjdG9yOiAnLmNhcmQtYmFja2xvZ19fZGF0ZS1zcGFuX3N0YXJ0JyxcbiAgZW5kRGF0ZVNlbGVjdG9yOiAnLmNhcmQtYmFja2xvZ19fZGF0ZS1zcGFuX2VuZCcsXG4gIGRyYWdTdGFydENsYXNzOiAnY2FyZC1iYWNrbG9nX2RyYWdnYWJsZScsXG59O1xuXG5leHBvcnQgY29uc3QgdXNlcnNDYXJkU2VsZWN0b3JzID0ge1xuICBwYXJlbnRTZWxlY3RvcjogJy5ib2FyZF9fdXNlcnMnLFxuICB0ZW1wbGF0ZVNlbGVjdG9yOiAnLnRlbXBsYXRlLWNhcmQtdXNlcicsXG4gIGVsZW1lbnRTZWxlY3RvcjogJy5jYXJkLXVzZXInLFxuICB1c2VyTmFtZVNlbGVjdG9yOiAnLmNhcmQtdXNlcl9fbmFtZScsXG4gIGRyYWdPdmVyQ2xhc3M6ICdjYXJkLXVzZXJfZHJhZy1vdmVyJyxcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxlbmRhckNvbHVtblNlbGVjdG9ycyA9IHtcbiAgcGFyZW50U2VsZWN0b3I6ICcuYm9hcmRfX2NhbGVuZGFyJyxcbiAgdGVtcGxhdGVTZWxlY3RvcjogJy50ZW1wbGF0ZS1jYWxlbmRhci1jb2x1bW4nLFxuICBlbGVtZW50U2VsZWN0b3I6ICcuY2FsZW5kYXItY29sdW1uJyxcbiAgZGF0ZUNlbGxTZWxlY3RvcjogJy5jYWxlbmRhci1jb2x1bW5fX2RhdGUnLFxuICBjdXJyZW50RGF5Q2xhc3M6ICdjYWxlbmRhci1jb2x1bW5fY3VycmVudC1kYXknLFxufTtcblxuZXhwb3J0IGNvbnN0IGNhbGVuZGFyQ2VsbFNlbGVjdG9ycyA9IHtcbiAgdGVtcGxhdGVTZWxlY3RvcjogJy50ZW1wbGF0ZS1jYWxlbmRhci1jZWxsJyxcbiAgZWxlbWVudFNlbGVjdG9yOiAnLmNhbGVuZGFyLWNlbGwnLFxuICBlbGVtZW50Q2xhc3M6ICdjYWxlbmRhci1jZWxsJyxcbiAgZHJhZ092ZXJDbGFzczogJ2NhbGVuZGFyLWNlbGxfZHJhZy1vdmVyJyxcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxlbmRhclRhc2tTZWxlY3RvcnMgPSB7XG4gIHRlbXBsYXRlU2VsZWN0b3I6ICcudGVtcGxhdGUtY2FsZW5kYXItdGFzaycsXG4gIGVsZW1lbnRTZWxlY3RvcjogJy5jYWxlbmRhci10YXNrJyxcbiAgZWxlbWVudENsYXNzOiAnY2FsZW5kYXItdGFzaycsXG4gIHRpdGxlU2VsZWN0b3I6ICcuY2FsZW5kYXItdGFza19fdGl0bGUnLFxuICBzdWJ0aXRsZVNlbGVjdG9yOiAnLmNhbGVuZGFyLXRhc2tfX3N1YnRpdGxlJyxcbiAgZGVzY3JpcHRpb25TZWxlY3RvcjogJy5jYWxlbmRhci10YXNrX19kZXNjcmlwdGlvbicsXG4gIHN0YXJ0RGF0ZVNlbGVjdG9yOiAnLmNhbGVuZGFyLXRhc2tfX2RhdGUtc3Bhbl9zdGFydCcsXG4gIGVuZERhdGVTZWxlY3RvcjogJy5jYWxlbmRhci10YXNrX19kYXRlLXNwYW5fZW5kJyxcbn07XG5cbmV4cG9ydCBjb25zdCB3ZWVrQnV0dG9uc1NlbGVjdG9ycyA9IHtcbiAgbmV4dFdlZWtCdXR0b246ICcuYnV0dG9uX25leHQnLFxuICBwcmV2V2Vla0J1dHRvbjogJy5idXR0b25fcHJldicsXG59O1xuXG5leHBvcnQgY29uc3QgcG9wdXBTZWxlY3RvcnMgPSB7XG4gIHBvcHVwRXJyb3I6ICcucG9wdXBfZXJyb3InLFxuICBwb3B1cE9wZW5DbGFzczogJ3BvcHVwX29wZW4nLFxufTtcblxuZXhwb3J0IGNvbnN0IHNlYXJjaEZvcm1TZWxlY3RvcnMgPSB7XG4gIHNlYXJjaEZvcm06ICcuc2VhcmNoLWZvcm0nLFxuICBzZWFyY2hJbnB1dDogJy5zZWFyY2gtZm9ybV9faW5wdXQnLFxuICBzdWJtaXRCdXR0b246ICcuYnV0dG9uX3NlYXJjaCcsXG59O1xuXG5leHBvcnQgY29uc3QgcHJlbG9hZGVyU3RhdGVTZWxlY3RvcnMgPSB7XG4gIHBhZ2VTZWxlY3RvcjogJy5wYWdlJyxcbiAgcGFnZUhpZGRlbkNsYXNzOiAncGFnZV9oaWRkZW4nLFxuICBwcmVsb2FkZXJTZWxlY3RvcjogJy5wcmVsb2FkZXInLFxuICBwcmVsb2FkZXJWaXNpYmxlQ2xhc3M6ICdwcmVsb2FkZXJfdmlzaWJsZScsXG59O1xuXG5leHBvcnQgY29uc3QgZGF0ZVNldHRpbmdzID0ge1xuICBsb2NhbGU6ICdydS1SVScsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrZGF5OiAnc2hvcnQnLFxuICAgIHllYXI6ICdudW1lcmljJyxcbiAgICBtb250aDogJ3Nob3J0JyxcbiAgICBkYXk6ICdudW1lcmljJyxcbiAgfSxcbiAgbnVtZXJpYzoge1xuICAgIGRheTogJ251bWVyaWMnLFxuICAgIG1vbnRoOiAnbnVtZXJpYycsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgZnVsbERheUluTWlsbGlzZWNvbmRzID0gMzYwMCAqIDI0ICogMTAwMDtcbmV4cG9ydCBjb25zdCB0aW1lckRlbGF5ID0gMzAwMDtcbmV4cG9ydCBjb25zdCBsb2NhbFN0b3JhZ2VUaGVtZUtleSA9ICdpc1RoZW1lRGFyayc7XG4iLCJpbXBvcnQgeyBkYXRlU2V0dGluZ3MgfSBmcm9tICcuLi9jb25maWcvY29uc3RhbnRzJztcblxuY29uc3QgcmVmaW5lVG9TdHJpbmcgPSAoZGF0ZSkgPT5cbiAgbmV3IERhdGUoZGF0ZSkudG9Mb2NhbGVEYXRlU3RyaW5nKGRhdGVTZXR0aW5ncy5sb2NhbGUsIGRhdGVTZXR0aW5ncy5vcHRpb25zKTtcblxuY29uc3QgcmVmaW5lVG9OdW1lcmljRERNTSA9IChkYXRlKSA9PlxuICBuZXcgRGF0ZShkYXRlKS50b0xvY2FsZURhdGVTdHJpbmcoZGF0ZVNldHRpbmdzLmxvY2FsZSwgZGF0ZVNldHRpbmdzLm51bWVyaWMpO1xuXG5jb25zdCByZWZpbmVUb051bWVyaWNZWU1NREQgPSAoZGF0ZSkgPT4gbmV3IERhdGUoZGF0ZSkudG9Mb2NhbGVEYXRlU3RyaW5nKCdlbi1DQScpO1xuXG5leHBvcnQgeyByZWZpbmVUb1N0cmluZywgcmVmaW5lVG9OdW1lcmljRERNTSwgcmVmaW5lVG9OdW1lcmljWVlNTUREIH07XG4iLCJpbXBvcnQgeyBBU1NJR05fQllfREFURSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgcmVmaW5lVG9OdW1lcmljWVlNTUREIH0gZnJvbSAnLi4vdXRpbHMvaGFuZGxlLWRhdGVzJztcblxuY2xhc3MgUHJvamVjdFN0YXRlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcbiAgICB0aGlzLl9hc3NpZ25lZFRhc2tzID0gW107XG4gICAgdGhpcy5fYmFja2xvZ1Rhc2tzID0gW107XG4gICAgdGhpcy5fdXNlcnMgPSBbXTtcbiAgICB0aGlzLl91c2Vyc0lkcyA9IHt9O1xuICAgIHRoaXMuX2NhbGVuZGFyTGVuZ3RoID0gNztcbiAgICB0aGlzLl9jdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5fY3VycmVudERhdGVOdW1lcmljID0gcmVmaW5lVG9OdW1lcmljWVlNTUREKG5ldyBEYXRlKCkpO1xuICAgIHRoaXMuX3N0YXJ0RGF5ID0gdGhpcy5fdXBkYXRlQW5kU2V0RGF0ZXMoKTtcbiAgfVxuXG4gIF9yZW1vdmVUYXNrRnJvbUJhY2tsb2codGFza0lkKSB7XG4gICAgdGhpcy5fYmFja2xvZ1Rhc2tzID0gdGhpcy5fYmFja2xvZ1Rhc2tzLmZpbHRlcigodGFzaykgPT4gdGFzay5pZCAhPT0gdGFza0lkKTtcbiAgfVxuXG4gIF9jYWxsU3Vic2NyaWJlcnMoKSB7XG4gICAgdGhpcy5fc3Vic2NyaWJlcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IGxpc3RlbmVyKCkpO1xuICB9XG5cbiAgX3VwZGF0ZUFuZFNldERhdGVzKCkge1xuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKHRoaXMuX2N1cnJlbnREYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApKTtcblxuICAgIHJldHVybiBzdGFydERhdGUuc2V0RGF0ZShcbiAgICAgIHN0YXJ0RGF0ZS5nZXREYXRlKCkgLSBzdGFydERhdGUuZ2V0RGF5KCkgKyAoc3RhcnREYXRlLmdldERheSgpID09PSAwID8gLTYgOiAxKVxuICAgICk7XG4gIH1cblxuICBnZXQgYXNzaWduZWRUYXNrcygpIHtcbiAgICByZXR1cm4gdGhpcy5fYXNzaWduZWRUYXNrcztcbiAgfVxuXG4gIGdldCBiYWNrbG9nVGFza3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2JhY2tsb2dUYXNrcztcbiAgfVxuXG4gIGdldCB1c2Vyc0lkcygpIHtcbiAgICByZXR1cm4gdGhpcy5fdXNlcnNJZHM7XG4gIH1cblxuICBzZXQgdXNlcnModmFsdWUpIHtcbiAgICB0aGlzLl91c2VycyA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHVzZXJzKCkge1xuICAgIHJldHVybiB0aGlzLl91c2VycztcbiAgfVxuXG4gIGdldCBjYWxlbmRhckxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsZW5kYXJMZW5ndGg7XG4gIH1cblxuICBnZXQgc3RhcnREYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0RGF5O1xuICB9XG5cbiAgc2V0IHN0YXJ0RGF5KHZhbHVlKSB7XG4gICAgdGhpcy5fc3RhcnREYXkgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBjdXJyZW50RGF0ZU51bWVyaWMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnREYXRlTnVtZXJpYztcbiAgfVxuXG4gIGFkZFRhc2tUb0Fzc2lnbmVkVGFza3ModGFzaykge1xuICAgIHRoaXMuX2Fzc2lnbmVkVGFza3MucHVzaCh0YXNrKTtcbiAgfVxuXG4gIGFzc2lnblRhc2soeyB0eXBlLCB0YXNrSWQsIGV4ZWN1dG9ySWQsIHN0YXJ0RGF0ZSB9KSB7XG4gICAgY29uc3QgdGFza1RvQmVBc3NpZ25lZCA9IHRoaXMuX2JhY2tsb2dUYXNrcy5maW5kKCh0YXNrKSA9PiB0YXNrSWQgPT09IHRhc2suaWQpO1xuICAgIHRhc2tUb0JlQXNzaWduZWQuZXhlY3V0b3IgPSArZXhlY3V0b3JJZDtcblxuICAgIC8vINC30LDQv9GA0L7RgSDQuNC3INC60LDQu9C10L3QtNCw0YDRj1xuICAgIGlmICh0eXBlID09PSBBU1NJR05fQllfREFURSkge1xuICAgICAgaWYgKHRoaXMuX2N1cnJlbnREYXRlID4gRGF0ZS5wYXJzZShzdGFydERhdGUpKSB7XG4gICAgICAgIC8vINC/0L7Qv9GL0YLQutCwINC90LDQt9C90LDRh9C40YLRjCDQt9Cw0LTQsNC90LjQtSDQvdCwIFwi0LLRh9C10YDQsFwiXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhc2tUb0JlQXNzaWduZWQucGxhbkVuZERhdGUgPT09IHRhc2tUb0JlQXNzaWduZWQucGxhblN0YXJ0RGF0ZSkge1xuICAgICAgICB0YXNrVG9CZUFzc2lnbmVkLnBsYW5FbmREYXRlID0gc3RhcnREYXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZGF0ZURpZmZlcmVuY2UgPVxuICAgICAgICAgIERhdGUucGFyc2UodGFza1RvQmVBc3NpZ25lZC5wbGFuRW5kRGF0ZSkgLSBEYXRlLnBhcnNlKHRhc2tUb0JlQXNzaWduZWQucGxhblN0YXJ0RGF0ZSk7XG4gICAgICAgIGNvbnN0IG5ld0VuZERhdGUgPSBEYXRlLnBhcnNlKHN0YXJ0RGF0ZSkgKyBkYXRlRGlmZmVyZW5jZTtcbiAgICAgICAgdGFza1RvQmVBc3NpZ25lZC5wbGFuRW5kRGF0ZSA9IHJlZmluZVRvTnVtZXJpY1lZTU1ERChuZXdFbmREYXRlKTtcbiAgICAgIH1cbiAgICAgIHRhc2tUb0JlQXNzaWduZWQucGxhblN0YXJ0RGF0ZSA9IHN0YXJ0RGF0ZTtcbiAgICB9XG4gICAgdGhpcy5hZGRUYXNrVG9Bc3NpZ25lZFRhc2tzKHRhc2tUb0JlQXNzaWduZWQpO1xuICAgIHRoaXMuX3JlbW92ZVRhc2tGcm9tQmFja2xvZyh0YXNrSWQpO1xuICAgIHRoaXMuX2NhbGxTdWJzY3JpYmVycygpO1xuICB9XG5cbiAgYWRkVGFza1RvQmFja2xvZyh0YXNrKSB7XG4gICAgdGhpcy5fYmFja2xvZ1Rhc2tzLnB1c2godGFzayk7XG4gIH1cblxuICBtYXBVc2Vyc0lkcyh1c2Vycykge1xuICAgIGNvbnN0IGlkcyA9IHVzZXJzLnJlZHVjZSgob2JqLCB7IGlkIH0sIGkpID0+ICh7IC4uLm9iaiwgW2ldOiBpZCB9KSwge30pO1xuICAgIHRoaXMuX3VzZXJzSWRzID0geyAuLi5pZHMgfTtcbiAgfVxuXG4gIGFkZFN1YnNjcmliZXJzKHN1YnNjcmliZXJzKSB7XG4gICAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbLi4uc3Vic2NyaWJlcnNdO1xuICB9XG59XG5cbmNvbnN0IFN0YXRlID0gbmV3IFByb2plY3RTdGF0ZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBTdGF0ZTtcbiIsImltcG9ydCB7IEJBU0VfVVJMIH0gZnJvbSAnLi4vY29uZmlnL2NvbmZpZyc7XG5cbmNvbnN0IGNoZWNrU2VydmVyUmVzcG9uc2UgPSAocmVzKSA9PiAocmVzLm9rID8gcmVzLmpzb24oKSA6IFByb21pc2UucmVqZWN0KHJlcykpO1xuXG5jb25zdCBnZXREYXRhID0gYXN5bmMgKHJvdXRlKSA9PiB7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfSR7cm91dGV9YCwgeyBtZXRob2Q6ICdHRVQnIH0pO1xuICByZXR1cm4gY2hlY2tTZXJ2ZXJSZXNwb25zZShyZXMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0RGF0YTtcbiIsImNsYXNzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHsgdGVtcGxhdGVTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yIH0pIHtcbiAgICB0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yID0gdGVtcGxhdGVTZWxlY3RvcjtcbiAgICB0aGlzLl9lbGVtZW50U2VsZWN0b3IgPSBlbGVtZW50U2VsZWN0b3I7XG4gIH1cblxuICBfZ2V0VGVtcGxhdGUoKSB7XG4gICAgdGhpcy5fdGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3RlbXBsYXRlU2VsZWN0b3IpLmNvbnRlbnQ7XG4gICAgLy8g0YHQsNC8INGN0LvQtdC80LXQvdGCXG4gICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlLnF1ZXJ5U2VsZWN0b3IodGhpcy5fZWxlbWVudFNlbGVjdG9yKS5jbG9uZU5vZGUodHJ1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50O1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL0NvbXBvbmVudCc7XG5pbXBvcnQgeyByZWZpbmVUb1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL2hhbmRsZS1kYXRlcyc7XG5cbmNsYXNzIEJhY2tsb2dDYXJkIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoXG4gICAgY2FyZERhdGEsXG4gICAge1xuICAgICAgdGVtcGxhdGVTZWxlY3RvcixcbiAgICAgIGVsZW1lbnRTZWxlY3RvcixcbiAgICAgIHRpdGxlU2VsZWN0b3IsXG4gICAgICBkZXNjcmlwdGlvblNlbGVjdG9yLFxuICAgICAgc3RhcnREYXRlU2VsZWN0b3IsXG4gICAgICBlbmREYXRlU2VsZWN0b3IsXG4gICAgICBkcmFnU3RhcnRDbGFzcyxcbiAgICB9XG4gICkge1xuICAgIHN1cGVyKHsgdGVtcGxhdGVTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yIH0pO1xuICAgIHRoaXMuX2NhcmREYXRhID0gY2FyZERhdGE7XG4gICAgdGhpcy5fYmFja2xvZ0NhcmQgPSBzdXBlci5fZ2V0VGVtcGxhdGUoKTtcbiAgICB0aGlzLl9kcmFnU3RhcnRDbGFzcyA9IGRyYWdTdGFydENsYXNzO1xuICAgIHRoaXMuX2NhcmRUaXRsZSA9IHRoaXMuX2JhY2tsb2dDYXJkLnF1ZXJ5U2VsZWN0b3IodGl0bGVTZWxlY3Rvcik7XG4gICAgdGhpcy5fY2FyZERlc2NyaXB0aW9uID0gdGhpcy5fYmFja2xvZ0NhcmQucXVlcnlTZWxlY3RvcihkZXNjcmlwdGlvblNlbGVjdG9yKTtcbiAgICB0aGlzLl9jYXJkU3RhcnREYXRlID0gdGhpcy5fYmFja2xvZ0NhcmQucXVlcnlTZWxlY3RvcihzdGFydERhdGVTZWxlY3Rvcik7XG4gICAgdGhpcy5fY2FyZEVuZERhdGUgPSB0aGlzLl9iYWNrbG9nQ2FyZC5xdWVyeVNlbGVjdG9yKGVuZERhdGVTZWxlY3Rvcik7XG4gICAgdGhpcy5faGFuZGxlRHJhZ1N0YXJ0ID0gdGhpcy5faGFuZGxlRHJhZ1N0YXJ0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlRHJhZ0VuZCA9IHRoaXMuX2hhbmRsZURyYWdFbmQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIF9oYW5kbGVEcmFnU3RhcnQoZXZ0KSB7XG4gICAgdGhpcy5fYmFja2xvZ0NhcmQuY2xhc3NMaXN0LmFkZCh0aGlzLl9kcmFnU3RhcnRDbGFzcyk7XG4gICAgZXZ0LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3BsYWluJywgdGhpcy5fY2FyZERhdGEuaWQpO1xuICAgIGV2dC5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9ICdtb3ZlJztcbiAgfVxuXG4gIF9oYW5kbGVEcmFnRW5kKCkge1xuICAgIHRoaXMuX2JhY2tsb2dDYXJkLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZHJhZ1N0YXJ0Q2xhc3MpO1xuICB9XG5cbiAgY3JlYXRlQ2FyZCgpIHtcbiAgICB0aGlzLl9jYXJkVGl0bGUudGV4dENvbnRlbnQgPSB0aGlzLl9jYXJkRGF0YS5zdWJqZWN0O1xuICAgIHRoaXMuX2NhcmREZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IHRoaXMuX2NhcmREYXRhLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMuX2NhcmRTdGFydERhdGUudGV4dENvbnRlbnQgPSByZWZpbmVUb1N0cmluZyh0aGlzLl9jYXJkRGF0YS5wbGFuU3RhcnREYXRlKTtcbiAgICB0aGlzLl9jYXJkRW5kRGF0ZS50ZXh0Q29udGVudCA9IHJlZmluZVRvU3RyaW5nKHRoaXMuX2NhcmREYXRhLnBsYW5FbmREYXRlKTtcbiAgICB0aGlzLl9iYWNrbG9nQ2FyZC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5fY2FyZERhdGEuaWQpO1xuICAgIHJldHVybiB0aGlzLl9iYWNrbG9nQ2FyZDtcbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2JhY2tsb2dDYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIHRoaXMuX2hhbmRsZURyYWdTdGFydCk7XG4gICAgdGhpcy5fYmFja2xvZ0NhcmQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsIHRoaXMuX2hhbmRsZURyYWdFbmQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhY2tsb2dDYXJkO1xuIiwiY2xhc3MgUmVuZGVyZXJTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoY29udGFpbmVyU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcbiAgICB0aGlzLmNsZWFySXRlbXMgPSB0aGlzLmNsZWFySXRlbXMuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGFkZEl0ZW0oaXRlbSkge1xuICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmQoaXRlbSk7XG4gIH1cblxuICBjbGVhckl0ZW1zKCkge1xuICAgIHRoaXMuX2NvbnRhaW5lci50ZXh0Q29udGVudCA9ICcnO1xuICB9XG5cbiAgYWRkVGV4dENvbnRlbnQoY29udGVudCkge1xuICAgIHRoaXMuX2NvbnRhaW5lci50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVuZGVyZXJTZWN0aW9uO1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL0NvbXBvbmVudCc7XG5pbXBvcnQgeyByZWZpbmVUb1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL2hhbmRsZS1kYXRlcyc7XG5cbmNsYXNzIENhbGVuZGFyVGFzayBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHRhc2ssXG4gICAge1xuICAgICAgdGVtcGxhdGVTZWxlY3RvcixcbiAgICAgIGVsZW1lbnRTZWxlY3RvcixcbiAgICAgIHRpdGxlU2VsZWN0b3IsXG4gICAgICBzdWJ0aXRsZVNlbGVjdG9yLFxuICAgICAgZGVzY3JpcHRpb25TZWxlY3RvcixcbiAgICAgIHN0YXJ0RGF0ZVNlbGVjdG9yLFxuICAgICAgZW5kRGF0ZVNlbGVjdG9yLFxuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoeyB0ZW1wbGF0ZVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IgfSk7XG4gICAgdGhpcy5fdGFzayA9IHRhc2s7XG4gICAgdGhpcy5fdGFza0VsZW1lbnQgPSBzdXBlci5fZ2V0VGVtcGxhdGUoKTtcbiAgICB0aGlzLl90aXRsZUVMZW1lbnQgPSB0aGlzLl90YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKHRpdGxlU2VsZWN0b3IpO1xuICAgIHRoaXMuX3N1YnRpdGxlRUxlbWVudCA9IHRoaXMuX3Rhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc3VidGl0bGVTZWxlY3Rvcik7XG4gICAgdGhpcy5fZGVzY3JpcHRpb25FbGVtZW50ID0gdGhpcy5fdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihkZXNjcmlwdGlvblNlbGVjdG9yKTtcbiAgICB0aGlzLl9zdGFydERhdGVFbGVtZW50ID0gdGhpcy5fdGFza0VsZW1lbnQucXVlcnlTZWxlY3RvcihzdGFydERhdGVTZWxlY3Rvcik7XG4gICAgdGhpcy5fZW5kRGF0ZUVsZW1lbnQgPSB0aGlzLl90YXNrRWxlbWVudC5xdWVyeVNlbGVjdG9yKGVuZERhdGVTZWxlY3Rvcik7XG4gIH1cblxuICBjcmVhdGVUYXNrKCkge1xuICAgIHRoaXMuX3RpdGxlRUxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuX3Rhc2suc3ViamVjdDtcbiAgICB0aGlzLl9zdWJ0aXRsZUVMZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLl90YXNrLnN1YmplY3Q7XG4gICAgdGhpcy5fZGVzY3JpcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy5fdGFzay5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLl9zdGFydERhdGVFbGVtZW50LnRleHRDb250ZW50ID0gcmVmaW5lVG9TdHJpbmcodGhpcy5fdGFzay5wbGFuU3RhcnREYXRlKTtcbiAgICB0aGlzLl9lbmREYXRlRWxlbWVudC50ZXh0Q29udGVudCA9IHJlZmluZVRvU3RyaW5nKHRoaXMuX3Rhc2sucGxhbkVuZERhdGUpO1xuXG4gICAgcmV0dXJuIHRoaXMuX3Rhc2tFbGVtZW50O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbGVuZGFyVGFzaztcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9Db21wb25lbnQnO1xuaW1wb3J0IENhbGVuZGFyVGFzayBmcm9tICcuL0NhbGVuZGFyVGFzayc7XG5pbXBvcnQgeyBjYWxlbmRhclRhc2tTZWxlY3RvcnMgfSBmcm9tICcuLi9jb25maWcvY29uc3RhbnRzJztcblxuY2xhc3MgQ2FsZW5kYXJDZWxsIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoY2VsbCwgeyB0ZW1wbGF0ZVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IgfSkge1xuICAgIHN1cGVyKHsgdGVtcGxhdGVTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yIH0pO1xuICAgIHRoaXMuX2NlbGwgPSBjZWxsO1xuICAgIHRoaXMuX2NlbGxFbGVtZW50ID0gc3VwZXIuX2dldFRlbXBsYXRlKCk7XG4gIH1cblxuICBfYWRkSXRlbShpdGVtKSB7XG4gICAgdGhpcy5fY2VsbEVsZW1lbnQuYXBwZW5kKGl0ZW0pO1xuICB9XG5cbiAgY3JlYXRlQ2VsbCgpIHtcbiAgICB0aGlzLl9jZWxsRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZXhlY3V0b3InLCB0aGlzLl9jZWxsLmV4ZWN1dG9yKTtcbiAgICB0aGlzLl9jZWxsRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0ZScsIHRoaXMuX2NlbGwuZGF0ZSk7XG5cbiAgICByZXR1cm4gdGhpcy5fY2VsbEVsZW1lbnQ7XG4gIH1cblxuICByZW5kZXJJdGVtcygpIHtcbiAgICB0aGlzLl9jZWxsLnRhc2tzLmZvckVhY2goKHRhc2spID0+IHtcbiAgICAgIGNvbnN0IG5ld1Rhc2sgPSBuZXcgQ2FsZW5kYXJUYXNrKHRhc2ssIGNhbGVuZGFyVGFza1NlbGVjdG9ycyk7XG4gICAgICB0aGlzLl9hZGRJdGVtKG5ld1Rhc2suY3JlYXRlVGFzaygpKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYWxlbmRhckNlbGw7XG4iLCJpbXBvcnQgUHJvamVjdFN0YXRlIGZyb20gJy4uL3N0YXRlL1Byb2plY3RTdGF0ZSc7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vQ29tcG9uZW50JztcbmltcG9ydCBDYWxlbmRhckNlbGwgZnJvbSAnLi9DYWxlbmRhckNlbGwnO1xuaW1wb3J0IHsgcmVmaW5lVG9OdW1lcmljRERNTSB9IGZyb20gJy4uL3V0aWxzL2hhbmRsZS1kYXRlcyc7XG5pbXBvcnQgeyBjYWxlbmRhckNlbGxTZWxlY3RvcnMgfSBmcm9tICcuLi9jb25maWcvY29uc3RhbnRzJztcblxuY2xhc3MgQ2FsZW5kYXJDb2x1bW4gZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihjb2x1bW4sIHsgdGVtcGxhdGVTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yLCBkYXRlQ2VsbFNlbGVjdG9yLCBjdXJyZW50RGF5Q2xhc3MgfSkge1xuICAgIHN1cGVyKHsgdGVtcGxhdGVTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yIH0pO1xuICAgIHRoaXMuX2NvbHVtbiA9IGNvbHVtbjtcbiAgICB0aGlzLl9jYWxlbmRhckNvbHVtbiA9IHN1cGVyLl9nZXRUZW1wbGF0ZSgpO1xuICAgIHRoaXMuX2RhdGVFbGVtZW50ID0gdGhpcy5fY2FsZW5kYXJDb2x1bW4ucXVlcnlTZWxlY3RvcihkYXRlQ2VsbFNlbGVjdG9yKTtcbiAgICB0aGlzLl9jdXJyZW50RGF5Q2xhc3MgPSBjdXJyZW50RGF5Q2xhc3M7XG4gICAgdGhpcy5fZGF5VGFza3NTY2hlbWEgPSB7fTtcbiAgfVxuXG4gIF9nZXRUYXNrc0ZvckN1cnJlbnREYXkodGFza3MpIHtcbiAgICBjb25zdCBwYXJzZWRDb2x1bW5EYXRlID0gRGF0ZS5wYXJzZSh0aGlzLl9jb2x1bW4uZGF0ZSk7XG4gICAgcmV0dXJuIHRhc2tzLmZpbHRlcihcbiAgICAgICh0YXNrKSA9PlxuICAgICAgICBEYXRlLnBhcnNlKHRhc2sucGxhblN0YXJ0RGF0ZSkgPD0gcGFyc2VkQ29sdW1uRGF0ZSAmJlxuICAgICAgICBwYXJzZWRDb2x1bW5EYXRlIDw9IERhdGUucGFyc2UodGFzay5wbGFuRW5kRGF0ZSlcbiAgICApO1xuICB9XG5cbiAgX2dldERheVRhc2tzU2NoZW1hKCkge1xuICAgIHRoaXMuX3Rhc2tzRm9yQ3VycmVudERheSA9IHRoaXMuX2dldFRhc2tzRm9yQ3VycmVudERheShQcm9qZWN0U3RhdGUuYXNzaWduZWRUYXNrcyk7XG5cbiAgICBpZiAodGhpcy5fdGFza3NGb3JDdXJyZW50RGF5KSB7XG4gICAgICB0aGlzLl90YXNrc0ZvckN1cnJlbnREYXkuZm9yRWFjaCgodGFzaykgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuX2RheVRhc2tzU2NoZW1hW3Rhc2suZXhlY3V0b3JdKSB7XG4gICAgICAgICAgdGhpcy5fZGF5VGFza3NTY2hlbWFbdGFzay5leGVjdXRvcl0gPSBbdGFza107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fZGF5VGFza3NTY2hlbWFbdGFzay5leGVjdXRvcl0gPSBbLi4udGhpcy5fZGF5VGFza3NTY2hlbWFbdGFzay5leGVjdXRvcl0sIHRhc2tdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjcmVhdGVDZWxscygpIHtcbiAgICB0aGlzLl9nZXREYXlUYXNrc1NjaGVtYSgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgUHJvamVjdFN0YXRlLnVzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCB1c2VySWQgPSBQcm9qZWN0U3RhdGUudXNlcnNJZHNbaV07XG4gICAgICBjb25zdCBjb2x1bW5DZWxsID0gbmV3IENhbGVuZGFyQ2VsbChcbiAgICAgICAgeyBleGVjdXRvcjogdXNlcklkLCBkYXRlOiB0aGlzLl9jb2x1bW4uZGF0ZSwgdGFza3M6IHRoaXMuX2RheVRhc2tzU2NoZW1hW3VzZXJJZF0gPz8gW10gfSxcbiAgICAgICAgY2FsZW5kYXJDZWxsU2VsZWN0b3JzXG4gICAgICApO1xuICAgICAgY29uc3QgY2VsbEVsZW1lbnQgPSBjb2x1bW5DZWxsLmNyZWF0ZUNlbGwoKTtcbiAgICAgIGNvbHVtbkNlbGwucmVuZGVySXRlbXMoKTtcbiAgICAgIHRoaXMuYWRkSXRlbShjZWxsRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlQ2FsZW5kYXJDb2x1bW4oKSB7XG4gICAgY29uc3QgY29sdW1uRGF0ZSA9IG5ldyBEYXRlKHRoaXMuX2NvbHVtbi5kYXRlKTtcbiAgICB0aGlzLl9kYXRlRWxlbWVudC50ZXh0Q29udGVudCA9IHJlZmluZVRvTnVtZXJpY0RETU0oY29sdW1uRGF0ZSk7XG4gICAgaWYgKHRoaXMuX2NvbHVtbi5kYXRlID09PSBQcm9qZWN0U3RhdGUuY3VycmVudERhdGVOdW1lcmljKSB7XG4gICAgICB0aGlzLl9jYWxlbmRhckNvbHVtbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2N1cnJlbnREYXlDbGFzcyk7XG4gICAgfVxuICAgIHRoaXMuY3JlYXRlQ2VsbHMoKTtcbiAgICByZXR1cm4gdGhpcy5fY2FsZW5kYXJDb2x1bW47XG4gIH1cblxuICBhZGRJdGVtKGl0ZW0pIHtcbiAgICB0aGlzLl9jYWxlbmRhckNvbHVtbi5hcHBlbmQoaXRlbSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FsZW5kYXJDb2x1bW47XG4iLCJpbXBvcnQgUHJvamVjdFN0YXRlIGZyb20gJy4uL3N0YXRlL1Byb2plY3RTdGF0ZSc7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vQ29tcG9uZW50JztcbmltcG9ydCB7IEFTU0lHTl9CWV9VU0VSIH0gZnJvbSAnLi4vc3RhdGUvdHlwZXMnO1xuXG5jbGFzcyBVc2VyQ2FyZCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGNhcmREYXRhLCB7IHRlbXBsYXRlU2VsZWN0b3IsIGVsZW1lbnRTZWxlY3RvciwgdXNlck5hbWVTZWxlY3RvciwgZHJhZ092ZXJDbGFzcyB9KSB7XG4gICAgc3VwZXIoeyB0ZW1wbGF0ZVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IgfSk7XG4gICAgdGhpcy5fY2FyZERhdGEgPSBjYXJkRGF0YTtcbiAgICB0aGlzLl91c2VyQ2FyZCA9IHN1cGVyLl9nZXRUZW1wbGF0ZSgpO1xuICAgIHRoaXMuX2Z1bGxOYW1lRWxlbWVudCA9IHRoaXMuX3VzZXJDYXJkLnF1ZXJ5U2VsZWN0b3IodXNlck5hbWVTZWxlY3Rvcik7XG4gICAgdGhpcy5fZHJhZ092ZXJDbGFzcyA9IGRyYWdPdmVyQ2xhc3M7XG4gICAgdGhpcy5faGFuZGxlRHJhZ092ZXIgPSB0aGlzLl9oYW5kbGVEcmFnT3Zlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZURyYWdMZWF2ZSA9IHRoaXMuX2hhbmRsZURyYWdMZWF2ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZURyb3AgPSB0aGlzLl9oYW5kbGVEcm9wLmJpbmQodGhpcyk7XG4gIH1cblxuICBfaGFuZGxlRHJhZ092ZXIoZXZ0KSB7XG4gICAgaWYgKGV2dC5kYXRhVHJhbnNmZXIgJiYgZXZ0LmRhdGFUcmFuc2Zlci50eXBlc1swXSA9PT0gJ3RleHQvcGxhaW4nKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuX3VzZXJDYXJkLmNsYXNzTGlzdC5hZGQodGhpcy5fZHJhZ092ZXJDbGFzcyk7XG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZURyYWdMZWF2ZSgpIHtcbiAgICB0aGlzLl91c2VyQ2FyZC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2RyYWdPdmVyQ2xhc3MpO1xuICB9XG5cbiAgX2hhbmRsZURyb3AoZXZ0KSB7XG4gICAgY29uc3QgdGFza0lkID0gZXZ0LmRhdGFUcmFuc2Zlci5nZXREYXRhKCd0ZXh0L3BsYWluJyk7XG4gICAgUHJvamVjdFN0YXRlLmFzc2lnblRhc2soeyB0eXBlOiBBU1NJR05fQllfVVNFUiwgdGFza0lkLCBleGVjdXRvcklkOiB0aGlzLl9jYXJkRGF0YS5pZCB9KTtcbiAgICB0aGlzLl9oYW5kbGVEcmFnTGVhdmUoKTtcbiAgfVxuXG4gIGNyZWF0ZUNhcmQoKSB7XG4gICAgdGhpcy5fZnVsbE5hbWVFbGVtZW50LnRleHRDb250ZW50ID0gYCR7dGhpcy5fY2FyZERhdGEuZmlyc3ROYW1lfSAke3RoaXMuX2NhcmREYXRhLnN1cm5hbWV9YDtcbiAgICByZXR1cm4gdGhpcy5fdXNlckNhcmQ7XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl91c2VyQ2FyZC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIHRoaXMuX2hhbmRsZURyYWdPdmVyKTtcbiAgICB0aGlzLl91c2VyQ2FyZC5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCB0aGlzLl9oYW5kbGVEcmFnTGVhdmUpO1xuICAgIHRoaXMuX3VzZXJDYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCB0aGlzLl9oYW5kbGVEcm9wKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVc2VyQ2FyZDtcbiIsImNvbnN0IHJlbW92ZUFuaW1hdGlvbiA9IChlbGVtZW50KSA9PiB7XG4gIC8vINGD0LTQsNC70LXQvdC40LUg0LTQu9GPINCy0L7RgdGB0YLQsNC90L7QstC70LXQvdC40Y8g0YPRgNC+0LLQvdC10Lkg0L3QsNC70L7QttC10L3QuNGPINC4INC00L7RgdGC0YPQv9C90L7RgdGC0Lgg0YHQstC+0LnRgdGC0LLQsCB0cmFuc2Zvcm1cbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gIH0sIDExMDApO1xufTtcblxuZXhwb3J0IGNvbnN0IGFwcGx5U2xpZGVJbkJvdHRvbVVwQW5pbSA9IChlbGVtZW50LCBpbmRleCkgPT4ge1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZShcbiAgICAnc3R5bGUnLFxuICAgIGBhbmltYXRpb246IHNsaWRlLWluLWJvdHRvbS11cCAwLjVzIGVhc2Utb3V0IDAuJHtpbmRleH1zIGZvcndhcmRzOyBvcGFjaXR5OiAwO2BcbiAgKTtcbiAgcmVtb3ZlQW5pbWF0aW9uKGVsZW1lbnQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGFwcGx5U2xpZGVJblJpZ2h0TGVmdEFuaW0gPSAoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgJ3N0eWxlJyxcbiAgICBgYW5pbWF0aW9uOiBzbGlkZS1pbi1yaWdodC1sZWZ0IDAuNXMgZWFzZS1vdXQgMC4ke2luZGV4fXMgZm9yd2FyZHM7IG9wYWNpdHk6IDA7YFxuICApO1xuICByZW1vdmVBbmltYXRpb24oZWxlbWVudCk7XG59O1xuIiwiaW1wb3J0ICcuL2luZGV4LmNzcyc7XG5pbXBvcnQgUHJvamVjdFN0YXRlIGZyb20gJy4vc3RhdGUvUHJvamVjdFN0YXRlJztcbmltcG9ydCB7XG4gIGJhY2tsb2dDYXJkU2VsZWN0b3JzLFxuICBjYWxlbmRhckNvbHVtblNlbGVjdG9ycyxcbiAgZnVsbERheUluTWlsbGlzZWNvbmRzLFxuICBwb3B1cFNlbGVjdG9ycyxcbiAgcHJlbG9hZGVyU3RhdGVTZWxlY3RvcnMsXG4gIHRvZ2dsZVRoZW1lU2V0dGluZ3MsXG4gIHVzZXJzQ2FyZFNlbGVjdG9ycyxcbn0gZnJvbSAnLi9jb25maWcvY29uc3RhbnRzJztcbmltcG9ydCB7IFRBU0tTX1JPVVRFLCBVU0VSU19ST1VURSB9IGZyb20gJy4vY29uZmlnL2NvbmZpZyc7XG5pbXBvcnQgeyByZWZpbmVUb051bWVyaWNZWU1NREQgfSBmcm9tICcuL3V0aWxzL2hhbmRsZS1kYXRlcyc7XG5pbXBvcnQgeyBpbml0U3dpdGNoQmV0d2VlbldlZWtzLCBpbml0VG9nZ2xlQ29sb3JUaGVtZSB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IGdldERhdGEgZnJvbSAnLi9hcGkvbWFpbi1hcGknO1xuaW1wb3J0IHtcbiAgQmFja2xvZ0NhcmQsXG4gIENhbGVuZGFyLFxuICBDYWxlbmRhckNvbHVtbixcbiAgUG9wdXBFcnJvcixcbiAgUmVuZGVyZXJTZWN0aW9uLFxuICBVc2VyQ2FyZCxcbn0gZnJvbSAnLi9jb21wb25lbnRzJztcbmltcG9ydCBpbml0U2VhcmNoIGZyb20gJy4vdXRpbHMvc2VhcmNoJztcbmltcG9ydCB7IGFwcGx5U2xpZGVJbkJvdHRvbVVwQW5pbSwgYXBwbHlTbGlkZUluUmlnaHRMZWZ0QW5pbSB9IGZyb20gJy4vdXRpbHMvYXBwbHktc3R5bGUtYW5pbWF0aW9uJztcblxuY29uc3QgcGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJlbG9hZGVyU3RhdGVTZWxlY3RvcnMucGFnZVNlbGVjdG9yKTtcbmNvbnN0IHByZWxvYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJlbG9hZGVyU3RhdGVTZWxlY3RvcnMucHJlbG9hZGVyU2VsZWN0b3IpO1xuY29uc3QgcG9wdXBFcnJvciA9IG5ldyBQb3B1cEVycm9yKHBvcHVwU2VsZWN0b3JzKTtcbi8vINC60L7QvdGC0LXQudC90LXRgNGLLdGA0LXQvdC00LXRgNC10YDRi1xuY29uc3QgYmFja2xvZ0xpc3QgPSBuZXcgUmVuZGVyZXJTZWN0aW9uKGJhY2tsb2dDYXJkU2VsZWN0b3JzLnBhcmVudFNlbGVjdG9yKTtcbmNvbnN0IHVzZXJzTGlzdCA9IG5ldyBSZW5kZXJlclNlY3Rpb24odXNlcnNDYXJkU2VsZWN0b3JzLnBhcmVudFNlbGVjdG9yKTtcbmNvbnN0IGNhbGVuZGFyQ29udGFpbmVyID0gbmV3IENhbGVuZGFyKGNhbGVuZGFyQ29sdW1uU2VsZWN0b3JzLnBhcmVudFNlbGVjdG9yKTtcbmNhbGVuZGFyQ29udGFpbmVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmNvbnN0IHJlbmRlckNvbHVtbnMgPSAoaXNBbmltYXRlZCkgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IFByb2plY3RTdGF0ZS5jYWxlbmRhckxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgY29sdW1uRGF0ZSA9IFByb2plY3RTdGF0ZS5zdGFydERheSArIGZ1bGxEYXlJbk1pbGxpc2Vjb25kcyAqIGk7XG4gICAgY29uc3QgZGF0ZVN0cmluZyA9IHJlZmluZVRvTnVtZXJpY1lZTU1ERChjb2x1bW5EYXRlKTtcblxuICAgIGNvbnN0IGNhbGVuZGFyQ29sdW1uID0gbmV3IENhbGVuZGFyQ29sdW1uKHsgZGF0ZTogZGF0ZVN0cmluZyB9LCBjYWxlbmRhckNvbHVtblNlbGVjdG9ycyk7XG4gICAgY29uc3QgY29sdW1uRWxlbWVudCA9IGNhbGVuZGFyQ29sdW1uLmNyZWF0ZUNhbGVuZGFyQ29sdW1uKCk7XG4gICAgaWYgKGlzQW5pbWF0ZWQpIHtcbiAgICAgIGFwcGx5U2xpZGVJblJpZ2h0TGVmdEFuaW0oY29sdW1uRWxlbWVudCwgaSk7XG4gICAgfVxuICAgIGNhbGVuZGFyQ29udGFpbmVyLmFkZEl0ZW0oY29sdW1uRWxlbWVudCk7XG4gIH1cbn07XG5cbmNvbnN0IGNyZWF0ZUJhY2tsb2dDYXJkID0gKHRhc2spID0+IHtcbiAgY29uc3QgYmFja2xvZ0NhcmQgPSBuZXcgQmFja2xvZ0NhcmQodGFzaywgYmFja2xvZ0NhcmRTZWxlY3RvcnMpO1xuICBjb25zdCBuZXdCYWNrbG9nQ2FyZCA9IGJhY2tsb2dDYXJkLmNyZWF0ZUNhcmQoKTtcbiAgYmFja2xvZ0NhcmQuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgcmV0dXJuIG5ld0JhY2tsb2dDYXJkO1xufTtcblxuY29uc3QgcmVuZGVyQmFja2xvZ1Rhc2tzID0gKCkgPT4ge1xuICBQcm9qZWN0U3RhdGUuYmFja2xvZ1Rhc2tzLmZvckVhY2goKHRhc2ssIGkpID0+IHtcbiAgICBjb25zdCBiYWNrbG9nQ2FyZCA9IGNyZWF0ZUJhY2tsb2dDYXJkKHRhc2spO1xuICAgIGFwcGx5U2xpZGVJbkJvdHRvbVVwQW5pbShiYWNrbG9nQ2FyZCwgaSk7XG4gICAgYmFja2xvZ0xpc3QuYWRkSXRlbShiYWNrbG9nQ2FyZCk7XG4gIH0pO1xufTtcblxuY29uc3QgcmVuZGVyVXNlcnMgPSAodXNlcnMsIGlzQW5pbWF0ZWQpID0+XG4gIHVzZXJzLmZvckVhY2goKHVzZXIsIGkpID0+IHtcbiAgICBjb25zdCB1c2VyQ2FyZCA9IG5ldyBVc2VyQ2FyZCh1c2VyLCB1c2Vyc0NhcmRTZWxlY3RvcnMpO1xuICAgIGNvbnN0IG5ld1VzZXJDYXJkID0gdXNlckNhcmQuY3JlYXRlQ2FyZCgpO1xuICAgIGlmIChpc0FuaW1hdGVkKSB7XG4gICAgICBhcHBseVNsaWRlSW5Cb3R0b21VcEFuaW0obmV3VXNlckNhcmQsIGkpO1xuICAgIH1cbiAgICB1c2VyQ2FyZC5zZXRFdmVudExpc3RlbmVycygpO1xuICAgIHVzZXJzTGlzdC5hZGRJdGVtKG5ld1VzZXJDYXJkKTtcbiAgfSk7XG5cbi8vINC/0LXRgNCy0LDRjyDQvtGC0YDQuNGB0L7QstC60LAg0Lgg0L7QsdGA0LDQsdC+0YLQutCwINC00LDQvdC90YvRhSDRgSDRgdC10YDQstC10YDQsFxuY29uc3QgZ2V0SW5pdGlhbERhdGEgPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcnMgPSBhd2FpdCBnZXREYXRhKFVTRVJTX1JPVVRFKTtcbiAgICBjb25zdCB0YXNrcyA9IGF3YWl0IGdldERhdGEoVEFTS1NfUk9VVEUpO1xuXG4gICAgLy8g0YHQvtGA0YLQuNGA0L7QstC60LAg0LfQsNC00LDQvdC40Lkg0Lgg0LTQvtCx0LDQstC70LXQvdC40LUg0LjRhSDQsiDRgdGC0LXQudGCXG4gICAgdGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuICAgICAgaWYgKHRhc2suZXhlY3V0b3IpIFByb2plY3RTdGF0ZS5hZGRUYXNrVG9Bc3NpZ25lZFRhc2tzKHRhc2spO1xuICAgICAgZWxzZSBQcm9qZWN0U3RhdGUuYWRkVGFza1RvQmFja2xvZyh0YXNrKTtcbiAgICB9KTtcbiAgICAvLyDRhNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0L7QsdGK0LXQutGC0LAg0YEgaWQg0LjRgdC/0L7Qu9C90LjRgtC10LvQtdC5XG4gICAgUHJvamVjdFN0YXRlLnVzZXJzID0gdXNlcnM7XG4gICAgUHJvamVjdFN0YXRlLm1hcFVzZXJzSWRzKHVzZXJzKTtcbiAgICAvLyDRgNC10L3QtNC10YDQuNC90LNcbiAgICByZW5kZXJVc2Vycyh1c2VycywgdHJ1ZSk7XG4gICAgcmVuZGVyQ29sdW1ucyh0cnVlKTtcbiAgICByZW5kZXJCYWNrbG9nVGFza3MoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcG9wdXBFcnJvci5vcGVuKCk7XG4gIH1cbiAgcGFnZS5jbGFzc0xpc3QucmVtb3ZlKHByZWxvYWRlclN0YXRlU2VsZWN0b3JzLnBhZ2VIaWRkZW5DbGFzcyk7XG4gIHByZWxvYWRlci5jbGFzc0xpc3QucmVtb3ZlKHByZWxvYWRlclN0YXRlU2VsZWN0b3JzLnByZWxvYWRlclZpc2libGVDbGFzcyk7XG59O1xuXG5nZXRJbml0aWFsRGF0YSgpO1xuXG4vLyDQv9C+0LjRgdC6XG5pbml0U2VhcmNoKGJhY2tsb2dMaXN0LCBjcmVhdGVCYWNrbG9nQ2FyZCwgcmVuZGVyQmFja2xvZ1Rhc2tzKTtcbi8vINC/0LXRgNC10LvQuNGB0YLRi9Cy0LDQvdC40LUg0LrQsNC70LXQvdC00LDRgNGPXG5pbml0U3dpdGNoQmV0d2VlbldlZWtzKGNhbGVuZGFyQ29udGFpbmVyLmNsZWFySXRlbXMsIHJlbmRlckNvbHVtbnMpO1xuLy8g0L/QtdGA0LXQutC70Y7Rh9C10L3QuNC1INGC0LXQvNGLXG5pbml0VG9nZ2xlQ29sb3JUaGVtZSh0b2dnbGVUaGVtZVNldHRpbmdzKTtcblxuLy8g0LTQvtCx0LDQstC70LXQvdC40LUg0L3QsNCx0LvRjtC00LDRgtC10LvQtdC5INCyINGB0YLQtdC50YIg0LTQu9GPINGA0LXRgNC10L3QtNC10YDQsFxuUHJvamVjdFN0YXRlLmFkZFN1YnNjcmliZXJzKFtcbiAgY2FsZW5kYXJDb250YWluZXIuY2xlYXJJdGVtcyxcbiAgYmFja2xvZ0xpc3QuY2xlYXJJdGVtcyxcbiAgcmVuZGVyQ29sdW1ucyxcbiAgcmVuZGVyQmFja2xvZ1Rhc2tzLFxuXSk7XG4iLCJpbXBvcnQgeyB0aW1lckRlbGF5IH0gZnJvbSAnLi4vY29uZmlnL2NvbnN0YW50cyc7XG5cbmNsYXNzIFBvcHVwRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihzZWxlY3RvcnMpIHtcbiAgICB0aGlzLl9zZWxlY3RvcnMgPSBzZWxlY3RvcnM7XG4gICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5wb3B1cEVycm9yKTtcbiAgfVxuXG4gIG9wZW4oKSB7XG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZCh0aGlzLl9zZWxlY3RvcnMucG9wdXBPcGVuQ2xhc3MpO1xuICAgIHRoaXMuX2Nsb3NlKCk7XG4gIH1cblxuICBfY2xvc2UoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX3NlbGVjdG9ycy5wb3B1cE9wZW5DbGFzcyk7XG4gICAgfSwgdGltZXJEZWxheSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9wdXBFcnJvcjtcbiIsImltcG9ydCBQcm9qZWN0U3RhdGUgZnJvbSAnLi4vc3RhdGUvUHJvamVjdFN0YXRlJztcbmltcG9ydCBSZW5kZXJlclNlY3Rpb24gZnJvbSAnLi9SZW5kZXJlclNlY3Rpb24nO1xuaW1wb3J0IHsgQVNTSUdOX0JZX0RBVEUgfSBmcm9tICcuLi9zdGF0ZS90eXBlcyc7XG5pbXBvcnQgeyBjYWxlbmRhckNlbGxTZWxlY3RvcnMsIGNhbGVuZGFyVGFza1NlbGVjdG9ycyB9IGZyb20gJy4uL2NvbmZpZy9jb25zdGFudHMnO1xuXG5jbGFzcyBDYWxlbmRhciBleHRlbmRzIFJlbmRlcmVyU2VjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKSB7XG4gICAgc3VwZXIoY29udGFpbmVyU2VsZWN0b3IpO1xuICAgIHRoaXMuX2hhbmRsZURyYWdPdmVyID0gdGhpcy5faGFuZGxlRHJhZ092ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9oYW5kbGVEcmFnTGVhdmUgPSB0aGlzLl9oYW5kbGVEcmFnTGVhdmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9oYW5kbGVEcm9wID0gdGhpcy5faGFuZGxlRHJvcC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgX2hhbmRsZURyYWdPdmVyKGV2dCkge1xuICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSBldnQ7XG4gICAgaWYgKFxuICAgICAgZXZ0LmRhdGFUcmFuc2ZlciAmJlxuICAgICAgZXZ0LmRhdGFUcmFuc2Zlci50eXBlc1swXSA9PT0gJ3RleHQvcGxhaW4nICYmXG4gICAgICAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhjYWxlbmRhckNlbGxTZWxlY3RvcnMuZWxlbWVudENsYXNzKSB8fFxuICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKGNhbGVuZGFyVGFza1NlbGVjdG9ycy5lbGVtZW50Q2xhc3MpKVxuICAgICkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLl9kcm9wcGFibGVDZWxsID0gdGFyZ2V0LmNsb3Nlc3QoY2FsZW5kYXJDZWxsU2VsZWN0b3JzLmVsZW1lbnRTZWxlY3Rvcik7XG4gICAgICB0aGlzLl9kcm9wcGFibGVDZWxsLmNsYXNzTGlzdC5hZGQoY2FsZW5kYXJDZWxsU2VsZWN0b3JzLmRyYWdPdmVyQ2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVEcmFnTGVhdmUoKSB7XG4gICAgdGhpcy5fZHJvcHBhYmxlQ2VsbC5jbGFzc0xpc3QucmVtb3ZlKGNhbGVuZGFyQ2VsbFNlbGVjdG9ycy5kcmFnT3ZlckNsYXNzKTtcbiAgfVxuXG4gIF9oYW5kbGVEcm9wKGV2dCkge1xuICAgIGNvbnN0IHRhc2tJZCA9IGV2dC5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgndGV4dC9wbGFpbicpO1xuICAgIFByb2plY3RTdGF0ZS5hc3NpZ25UYXNrKHtcbiAgICAgIHR5cGU6IEFTU0lHTl9CWV9EQVRFLFxuICAgICAgdGFza0lkLFxuICAgICAgZXhlY3V0b3JJZDogdGhpcy5fZHJvcHBhYmxlQ2VsbC5kYXRhc2V0LmV4ZWN1dG9yLFxuICAgICAgc3RhcnREYXRlOiB0aGlzLl9kcm9wcGFibGVDZWxsLmRhdGFzZXQuZGF0ZSxcbiAgICB9KTtcbiAgICB0aGlzLl9oYW5kbGVEcmFnTGVhdmUoKTtcbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIHRoaXMuX2hhbmRsZURyYWdPdmVyKTtcbiAgICB0aGlzLl9jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2xlYXZlJywgdGhpcy5faGFuZGxlRHJhZ0xlYXZlKTtcbiAgICB0aGlzLl9jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIHRoaXMuX2hhbmRsZURyb3ApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbGVuZGFyO1xuIiwiZXhwb3J0IGNvbnN0IEJBU0VfVVJMID1cbiAgJ2h0dHBzOi8vdmFyYW5raW5fZGV2LmVsbWEzNjUucnUvYXBpL2V4dGVuc2lvbnMvMmEzODc2MGUtMDgzYS00ZGQwLWFlYmMtNzhiNTcwYmZkM2M3L3NjcmlwdCc7XG5leHBvcnQgY29uc3QgVVNFUlNfUk9VVEUgPSAnL3VzZXJzJztcbmV4cG9ydCBjb25zdCBUQVNLU19ST1VURSA9ICcvdGFza3MnO1xuIiwiaW1wb3J0IHsgc2VhcmNoRm9ybVNlbGVjdG9ycywgdGltZXJEZWxheSB9IGZyb20gJy4uL2NvbmZpZy9jb25zdGFudHMnO1xuaW1wb3J0IFByb2plY3RTdGF0ZSBmcm9tICcuLi9zdGF0ZS9Qcm9qZWN0U3RhdGUnO1xuXG5jb25zdCBpbml0U2VhcmNoID0gKGNvbnRhaW5lciwgY3JlYXRlQ2FyZENhbGxiYWNrLCByZW5kZXJDYWxsYmFjaykgPT4ge1xuICBjb25zdCBzZWFyY2hGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWFyY2hGb3JtU2VsZWN0b3JzLnNlYXJjaEZvcm0pO1xuICBjb25zdCBzZWFyY2hJbnB1dCA9IHNlYXJjaEZvcm0ucXVlcnlTZWxlY3RvcihzZWFyY2hGb3JtU2VsZWN0b3JzLnNlYXJjaElucHV0KTtcbiAgY29uc3Qgc3VibWl0QnV0dG9uID0gc2VhcmNoRm9ybS5xdWVyeVNlbGVjdG9yKHNlYXJjaEZvcm1TZWxlY3RvcnMuc3VibWl0QnV0dG9uKTtcblxuICBjb25zdCBoYW5kbGVTZWFyY2ggPSAoZXZ0KSA9PiB7XG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3Qga2V5d29yZCA9IHNlYXJjaElucHV0LnZhbHVlO1xuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKGtleXdvcmQubGVuZ3RoKSB7XG4gICAgICByZXN1bHQgPSBQcm9qZWN0U3RhdGUuYmFja2xvZ1Rhc2tzLmZpbHRlcigodGFzaykgPT5cbiAgICAgICAgdGFzay5zdWJqZWN0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoa2V5d29yZC50b0xvd2VyQ2FzZSgpKVxuICAgICAgKTtcbiAgICAgIGNvbnRhaW5lci5jbGVhckl0ZW1zKCk7XG5cbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdC5mb3JFYWNoKCh0YXNrKSA9PiB7XG4gICAgICAgICAgY29uc3QgYmFja2xvZ0NhcmQgPSBjcmVhdGVDYXJkQ2FsbGJhY2sodGFzayk7XG4gICAgICAgICAgY29udGFpbmVyLmFkZEl0ZW0oYmFja2xvZ0NhcmQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRhaW5lci5hZGRUZXh0Q29udGVudCgn0J3QuNGH0LXQs9C+INC90LUg0L3QsNGI0LvQvtGB0YwnKTtcbiAgICAgICAgc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgY29udGFpbmVyLmNsZWFySXRlbXMoKTtcbiAgICAgICAgICByZW5kZXJDYWxsYmFjaygpO1xuICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB9LCB0aW1lckRlbGF5KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgc2VhcmNoRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBoYW5kbGVTZWFyY2gpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5pdFNlYXJjaDtcbiIsImltcG9ydCBQcm9qZWN0U3RhdGUgZnJvbSAnLi4vc3RhdGUvUHJvamVjdFN0YXRlJztcbmltcG9ydCB7IGZ1bGxEYXlJbk1pbGxpc2Vjb25kcywgd2Vla0J1dHRvbnNTZWxlY3RvcnMgfSBmcm9tICcuLi9jb25maWcvY29uc3RhbnRzJztcblxuY29uc3QgaW5pdFN3aXRjaEJldHdlZW5XZWVrcyA9IChjbGVhckNvbnRhaW5lckNhbGxiYWNrLCByZW5kZXJDYWxsYmFjaykgPT4ge1xuICBjb25zdCBzaG93TmV4dFdlZWsgPSAoKSA9PiB7XG4gICAgY2xlYXJDb250YWluZXJDYWxsYmFjaygpO1xuICAgIFByb2plY3RTdGF0ZS5zdGFydERheSArPSBmdWxsRGF5SW5NaWxsaXNlY29uZHMgKiA3O1xuICAgIHJlbmRlckNhbGxiYWNrKCk7XG4gIH07XG5cbiAgY29uc3Qgc2hvd1ByZXZXZWVrID0gKCkgPT4ge1xuICAgIGNsZWFyQ29udGFpbmVyQ2FsbGJhY2soKTtcbiAgICBQcm9qZWN0U3RhdGUuc3RhcnREYXkgLT0gZnVsbERheUluTWlsbGlzZWNvbmRzICogNztcbiAgICByZW5kZXJDYWxsYmFjaygpO1xuICB9O1xuXG4gIGNvbnN0IG5leHRXZWVrQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih3ZWVrQnV0dG9uc1NlbGVjdG9ycy5uZXh0V2Vla0J1dHRvbik7XG4gIGNvbnN0IHByZXZXZWVrQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih3ZWVrQnV0dG9uc1NlbGVjdG9ycy5wcmV2V2Vla0J1dHRvbik7XG5cbiAgbmV4dFdlZWtCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaG93TmV4dFdlZWspO1xuICBwcmV2V2Vla0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNob3dQcmV2V2Vlayk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbml0U3dpdGNoQmV0d2VlbldlZWtzO1xuIiwiaW1wb3J0IHsgbG9jYWxTdG9yYWdlVGhlbWVLZXkgfSBmcm9tICcuLi9jb25maWcvY29uc3RhbnRzJztcblxuY29uc3QgaW5pdFRvZ2dsZUNvbG9yVGhlbWUgPSAoeyBib2R5U2VsZWN0b3IsIGJvZHlOZXdUaGVtZUNsYXNzLCBidXR0b25TZWxlY3RvciB9KSA9PiB7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGJvZHlTZWxlY3Rvcik7XG4gIGNvbnN0IGNoYW5nZUNvbG9yVGhlbWVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGJ1dHRvblNlbGVjdG9yKTtcblxuICBjb25zdCBpc1RoZW1lRGFyayA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0obG9jYWxTdG9yYWdlVGhlbWVLZXkpKTtcblxuICBpZiAoaXNUaGVtZURhcmspIHtcbiAgICBib2R5LmNsYXNzTGlzdC5hZGQoYm9keU5ld1RoZW1lQ2xhc3MpO1xuICB9XG5cbiAgY29uc3QgdG9nZ2xlQW5kTWVtb1RoZW1lID0gKCkgPT4ge1xuICAgIGlmIChib2R5LmNsYXNzTGlzdC5jb250YWlucyhib2R5TmV3VGhlbWVDbGFzcykpIHtcbiAgICAgIGJvZHkuY2xhc3NMaXN0LnJlbW92ZShib2R5TmV3VGhlbWVDbGFzcyk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShsb2NhbFN0b3JhZ2VUaGVtZUtleSwgSlNPTi5zdHJpbmdpZnkoZmFsc2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm9keS5jbGFzc0xpc3QuYWRkKGJvZHlOZXdUaGVtZUNsYXNzKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGxvY2FsU3RvcmFnZVRoZW1lS2V5LCBKU09OLnN0cmluZ2lmeSh0cnVlKSk7XG4gICAgfVxuICB9O1xuXG4gIGNoYW5nZUNvbG9yVGhlbWVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVBbmRNZW1vVGhlbWUpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5pdFRvZ2dsZUNvbG9yVGhlbWU7XG4iXSwibmFtZXMiOlsiQVNTSUdOX0JZX0RBVEUiLCJiYWNrbG9nQ2FyZFNlbGVjdG9ycyIsInBhcmVudFNlbGVjdG9yIiwidGVtcGxhdGVTZWxlY3RvciIsImVsZW1lbnRTZWxlY3RvciIsInRpdGxlU2VsZWN0b3IiLCJkZXNjcmlwdGlvblNlbGVjdG9yIiwic3RhcnREYXRlU2VsZWN0b3IiLCJlbmREYXRlU2VsZWN0b3IiLCJkcmFnU3RhcnRDbGFzcyIsInVzZXJzQ2FyZFNlbGVjdG9ycyIsInVzZXJOYW1lU2VsZWN0b3IiLCJkcmFnT3ZlckNsYXNzIiwiY2FsZW5kYXJDb2x1bW5TZWxlY3RvcnMiLCJkYXRlQ2VsbFNlbGVjdG9yIiwiY3VycmVudERheUNsYXNzIiwiY2FsZW5kYXJDZWxsU2VsZWN0b3JzIiwiZWxlbWVudENsYXNzIiwiY2FsZW5kYXJUYXNrU2VsZWN0b3JzIiwic3VidGl0bGVTZWxlY3RvciIsImRhdGVTZXR0aW5ncyIsIndlZWtkYXkiLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJsb2NhbFN0b3JhZ2VUaGVtZUtleSIsInJlZmluZVRvU3RyaW5nIiwiZGF0ZSIsIkRhdGUiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJyZWZpbmVUb051bWVyaWNZWU1NREQiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJfc3Vic2NyaWJlcnMiLCJfYXNzaWduZWRUYXNrcyIsIl9iYWNrbG9nVGFza3MiLCJfdXNlcnMiLCJfdXNlcnNJZHMiLCJfY2FsZW5kYXJMZW5ndGgiLCJfY3VycmVudERhdGUiLCJfY3VycmVudERhdGVOdW1lcmljIiwiX3N0YXJ0RGF5IiwiX3VwZGF0ZUFuZFNldERhdGVzIiwiX3JlbW92ZVRhc2tGcm9tQmFja2xvZyIsInRhc2tJZCIsImZpbHRlciIsInRhc2siLCJpZCIsIl9jYWxsU3Vic2NyaWJlcnMiLCJmb3JFYWNoIiwibGlzdGVuZXIiLCJzdGFydERhdGUiLCJzZXRIb3VycyIsInNldERhdGUiLCJnZXREYXRlIiwiZ2V0RGF5IiwiYXNzaWduZWRUYXNrcyIsImJhY2tsb2dUYXNrcyIsInVzZXJzSWRzIiwidXNlcnMiLCJ2YWx1ZSIsImNhbGVuZGFyTGVuZ3RoIiwic3RhcnREYXkiLCJjdXJyZW50RGF0ZU51bWVyaWMiLCJhZGRUYXNrVG9Bc3NpZ25lZFRhc2tzIiwicHVzaCIsImFzc2lnblRhc2siLCJ0eXBlIiwiZXhlY3V0b3JJZCIsInRhc2tUb0JlQXNzaWduZWQiLCJmaW5kIiwiZXhlY3V0b3IiLCJwYXJzZSIsInBsYW5FbmREYXRlIiwicGxhblN0YXJ0RGF0ZSIsImRhdGVEaWZmZXJlbmNlIiwibmV3RW5kRGF0ZSIsImFkZFRhc2tUb0JhY2tsb2ciLCJtYXBVc2Vyc0lkcyIsImlkcyIsInJlZHVjZSIsIm9iaiIsImkiLCJhZGRTdWJzY3JpYmVycyIsInN1YnNjcmliZXJzIiwiYXN5bmMiLCJyb3V0ZSIsInJlcyIsImZldGNoIiwibWV0aG9kIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsIl90ZW1wbGF0ZVNlbGVjdG9yIiwiX2VsZW1lbnRTZWxlY3RvciIsIl9nZXRUZW1wbGF0ZSIsIl90ZW1wbGF0ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJjYXJkRGF0YSIsInN1cGVyIiwiX2NhcmREYXRhIiwiX2JhY2tsb2dDYXJkIiwiX2RyYWdTdGFydENsYXNzIiwiX2NhcmRUaXRsZSIsIl9jYXJkRGVzY3JpcHRpb24iLCJfY2FyZFN0YXJ0RGF0ZSIsIl9jYXJkRW5kRGF0ZSIsIl9oYW5kbGVEcmFnU3RhcnQiLCJiaW5kIiwiX2hhbmRsZURyYWdFbmQiLCJldnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJkYXRhVHJhbnNmZXIiLCJzZXREYXRhIiwiZWZmZWN0QWxsb3dlZCIsInJlbW92ZSIsImNyZWF0ZUNhcmQiLCJ0ZXh0Q29udGVudCIsInN1YmplY3QiLCJkZXNjcmlwdGlvbiIsInNldEF0dHJpYnV0ZSIsInNldEV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNvbnRhaW5lclNlbGVjdG9yIiwiX2NvbnRhaW5lciIsImNsZWFySXRlbXMiLCJhZGRJdGVtIiwiaXRlbSIsImFwcGVuZCIsImFkZFRleHRDb250ZW50IiwiX3Rhc2siLCJfdGFza0VsZW1lbnQiLCJfdGl0bGVFTGVtZW50IiwiX3N1YnRpdGxlRUxlbWVudCIsIl9kZXNjcmlwdGlvbkVsZW1lbnQiLCJfc3RhcnREYXRlRWxlbWVudCIsIl9lbmREYXRlRWxlbWVudCIsImNyZWF0ZVRhc2siLCJjZWxsIiwiX2NlbGwiLCJfY2VsbEVsZW1lbnQiLCJfYWRkSXRlbSIsImNyZWF0ZUNlbGwiLCJyZW5kZXJJdGVtcyIsInRhc2tzIiwibmV3VGFzayIsImNvbHVtbiIsIl9jb2x1bW4iLCJfY2FsZW5kYXJDb2x1bW4iLCJfZGF0ZUVsZW1lbnQiLCJfY3VycmVudERheUNsYXNzIiwiX2RheVRhc2tzU2NoZW1hIiwiX2dldFRhc2tzRm9yQ3VycmVudERheSIsInBhcnNlZENvbHVtbkRhdGUiLCJfZ2V0RGF5VGFza3NTY2hlbWEiLCJfdGFza3NGb3JDdXJyZW50RGF5IiwiY3JlYXRlQ2VsbHMiLCJ1c2VySWQiLCJjb2x1bW5DZWxsIiwiY2VsbEVsZW1lbnQiLCJjcmVhdGVDYWxlbmRhckNvbHVtbiIsImNvbHVtbkRhdGUiLCJfdXNlckNhcmQiLCJfZnVsbE5hbWVFbGVtZW50IiwiX2RyYWdPdmVyQ2xhc3MiLCJfaGFuZGxlRHJhZ092ZXIiLCJfaGFuZGxlRHJhZ0xlYXZlIiwiX2hhbmRsZURyb3AiLCJ0eXBlcyIsInByZXZlbnREZWZhdWx0IiwiZ2V0RGF0YSIsImZpcnN0TmFtZSIsInN1cm5hbWUiLCJyZW1vdmVBbmltYXRpb24iLCJlbGVtZW50Iiwic2V0VGltZW91dCIsInJlbW92ZUF0dHJpYnV0ZSIsImFwcGx5U2xpZGVJbkJvdHRvbVVwQW5pbSIsImluZGV4IiwicGFnZSIsInByZWxvYWRlciIsInBvcHVwRXJyb3IiLCJzZWxlY3RvcnMiLCJfc2VsZWN0b3JzIiwiX3BvcHVwIiwib3BlbiIsInBvcHVwT3BlbkNsYXNzIiwiX2Nsb3NlIiwiYmFja2xvZ0xpc3QiLCJ1c2Vyc0xpc3QiLCJjYWxlbmRhckNvbnRhaW5lciIsInRhcmdldCIsImNvbnRhaW5zIiwiX2Ryb3BwYWJsZUNlbGwiLCJjbG9zZXN0IiwiZGF0YXNldCIsInJlbmRlckNvbHVtbnMiLCJpc0FuaW1hdGVkIiwiZGF0ZVN0cmluZyIsImNvbHVtbkVsZW1lbnQiLCJjcmVhdGVCYWNrbG9nQ2FyZCIsImJhY2tsb2dDYXJkIiwibmV3QmFja2xvZ0NhcmQiLCJyZW5kZXJCYWNrbG9nVGFza3MiLCJ1c2VyIiwidXNlckNhcmQiLCJuZXdVc2VyQ2FyZCIsInJlbmRlclVzZXJzIiwiZXJyIiwiZ2V0SW5pdGlhbERhdGEiLCJjb250YWluZXIiLCJjcmVhdGVDYXJkQ2FsbGJhY2siLCJyZW5kZXJDYWxsYmFjayIsInNlYXJjaEZvcm0iLCJzZWFyY2hJbnB1dCIsInN1Ym1pdEJ1dHRvbiIsImtleXdvcmQiLCJyZXN1bHQiLCJsZW5ndGgiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiZGlzYWJsZWQiLCJjbGVhckNvbnRhaW5lckNhbGxiYWNrIiwibmV4dFdlZWtCdXR0b24iLCJwcmV2V2Vla0J1dHRvbiIsImZ1bGxEYXlJbk1pbGxpc2Vjb25kcyIsImJvZHlTZWxlY3RvciIsImJvZHlOZXdUaGVtZUNsYXNzIiwiYnV0dG9uU2VsZWN0b3IiLCJib2R5IiwiY2hhbmdlQ29sb3JUaGVtZUJ1dHRvbiIsIkpTT04iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImJ1dHRvbk5ld1RoZW1lQ2xhc3MiXSwic291cmNlUm9vdCI6IiJ9